{"version":3,"sources":["src/NumJS/Array.ts","src/NumJS/MinMax.ts","src/NumJS/Random.ts","src/NumJS/Utils.ts","src/Net/Utils.ts","src/Net/Model.ts","src/Net/Vol.ts","src/Net/Layers/BaseLayer.ts","src/Net/Layers/ConcatLayer.ts","src/Net/Layers/ConvLayer.ts","src/Net/Layers/DropoutLayer.ts","src/Net/Layers/FullyConnectedLayer.ts","src/Net/Layers/InputLayer.ts","src/Net/Layers/LocalResponseNormalizationLayer.ts","src/Net/Layers/MaxoutLayer.ts","src/Net/Layers/PoolLayer.ts","src/Net/Layers/RegressionLayer.ts","src/Net/Layers/ReluLayer.ts","src/Net/Layers/SVMLayer.ts","src/Net/Layers/SigmoidLayer.ts","src/Net/Layers/SoftmaxLayer.ts","src/Net/Layers/TanhLayer.ts","src/Parser/TextParser.ts","src/Parser/BinaryParser.ts","src/Parser/BinaryprotoParser.ts","src/Parser/BlobProtoParser.ts","src/Parser/PrototxtParser.ts","src/Net/CaffeModel.ts","src/ImgJS/Image.ts","src/Utils/ActivationDrawer.ts","src/Utils/GraphDrawer.ts"],"names":["NumJS","DEFAULT_TYPE_INSTANCE","Float32Array","zeros","n","dtype","fill","A","b","i","len","length","prod","prev","sum","add","B","TypeError","addConst","sub","subConst","mul","mulByConst","div","divByConst","addScaled","c","max","max_","Number","NEGATIVE_INFINITY","argmax","idx","maxn","slice","sort","a","argmaxn","indices","Uint32Array","maxmin","w","maxv","minv","maxi","mini","dv","gaussRandom","cached","cachedVal","u","Math","random","v","r","sqrt","log","randf","randi","floor","randn","mu","std","randperm","temp","j","arr","q","clip","value","min","mod","tanh","x","y","exp","Net","arrContains","elt","nj","weightedSample","lst","probs","p","cumprob","k","getopt","opt","field_name","default_value","undefined","ret","forEach","f","assert","condition","message","Error","arrUnique","push","Model","prototype","getLayer","name","this","layers","get","setInputDimensions","width","height","depth","layerIterator","layer","pred","in_sx","in_sy","in_depth","updateDimensions","iteratorFn","params","_this","layerStack","edges","visited","d3","set","reverse","start","values","size","map","d","from","to","edgesFrom","nest","key","entries","edgesTo","layer_1","pop","parentKeys","end","childrenKeys","filter","has","parentKeysOfChild","forward","V","is_training","currentActivation","activationMap","parents","backward","loss","debugStructure","numParams","format","f2","numLayers","numParamsPerLayer","getNumParameters","str","getOutputShape","join","getDescription","console","Vol","sx","sy","scale","fromArray","vol","clone","cloneAndZero","ix","get_grad","dw","set_grad","add_grad","sub_grad","mul_grad","div_grad","roll","ox","oy","od","V2","dval","zoom","zx","zy","zd","round","ceil","startx","starty","startd","endx","endy","endd","dx","dy","dd","toJSON","json","fromJSON","Layers","BaseLayer","out_depth","out_sy","out_sx","input","output","resetGradient","in_act","Array","layer_type","toUpperCase","getParamsAndGrads","ConcatLayer","_super","call","axis","__extends","Vs","offset","V2w","j_1","out_act","V2dw","Vdw","ConvLayer","filters","stride","pad","conv_groups","l1_decay_mul","l2_decay_mul","bias","biases","f_depth","V_sx","V_sy","xy_stride","g","f_start","f_end","ay","ax","fy","fx","fd","group_depth","chain_grad","ix1","ix2","response","grads","s","concat","DropoutLayer","drop_prob","dropped","Int8Array","N","FullyConnectedLayer","num_neurons","num_inputs","Vw","wi","tfi","toString","InputLayer","LocalResponseNormalizationLayer","alpha","beta","warn","S_cache_","n2","a_i","f0","f1","aa","scale_i","b_i","pow","be_i","b_j","ae_i","MaxoutLayer","group_size","switches","ai","a2","PoolLayer","pool","switchx","switchy","d_1","ax_1","ay_1","v_1","xstart","ystart","xend","yend","pool_size","x_1","y_1","winx","winy","RegressionLayer","dim","yi","val","ReluLayer","SVMLayer","yscore","ydiff","SigmoidLayer","v2wi","SoftmaxLayer","as","amax","es","esum","e","TanhLayer","Parser","TextParser","fetch","url","req","Request","then","text","parse","parseString","BinaryParser","arrayBuffer","parseBuffer","BinaryprotoParser","raw","_","dcodeIO","ProtoBuf","newBuilder","package","messages","fields","rule","type","id","options","packed","default","enums","build","parseProto","caffe","BlobProtoParser","rawData","protoParser","blob","BlobProto","decode","channels","data","PrototxtParser","parsePrototxt","level","match","regexVal","regexObj","indent","RegExp","exec","isArray","CaffeModel","modelPath","weightPath","load","model","create","loadWeights","fromText","def","createLayers","createEdges","caffeLayerToJs","layerOpt","bottom","top","toLowerCase","input_param","shape","param","cp","convolution_param","kernel_size","num_output","decay_mult","group","lrn_param","local_size","dp","dropout_param","dropout_ratio","concat_param","pp","pooling_param","global_pooling","inner_product_param","error","makeInput","input_dim","edgeSet","getEdgeId","layerName","edge","Promise","all","resolve","ImgJS","Image","src","canvas","document","createElement","image","imgData","reject","ctx","getContext","onload","imageSmoothingEnabled","drawImage","getImageData","Date","getTime","setAttribute","render","body","appendChild","img","putImageData","fromMean","normalize","fromVol","fromFilter","mean","channel","aplha","h","mm","c0","c1","c2","Uint8ClampedArray","mean_0","mean_1","mean_2","dval_0","dval_1","dval_2","toVol","Utils","im","ActivationDrawer","element","renderInput","maxElementsPerLayer","$elem","select","selectAll","remove","append","$vis","attr","$activations","$canv","fromNet","GraphDrawer","compact","dagreD3","graph","createCompactGraph","createGraph","$svg","$g","xOffset","fit","rotate","getHeightScaleTemplate","exponent","range","MIN_LAYER_HEIGHT","MAX_LAYER_HEIGHT","clamp","getWidthScaleTemplate","MIN_LAYER_WIDTH","MAX_LAYER_WIDTH","getWidthScale","extWidth","extent","extHeight","widthScale","domain","layerSize","getHeightScale","extDepth","heightScale","layerDepth","graphlib","Graph","setGraph","setDefaultEdgeLabel","getWidth","getHeight","after","before","emph","paramsFormat","getNumParams","layerGroup","getCompactLabel","split","LAYER_NAME_SEP","getCompactClass","replace","LAYER_GROUP_SEP","lastLayer","setNode","labelType","label","class","prevLayer","setEdge","addRoundCorners","nodes","node","rx","ry","NODE_RADIUS"],"mappings":"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","file":"caffe.min.js","sourcesContent":["namespace NumJS {\n\n  type DEFAULT_TYPE = Float32Array;\n\n  export var DEFAULT_TYPE_INSTANCE = Float32Array;\n\n  export function zeros(n: number, dtype = DEFAULT_TYPE_INSTANCE) {\n    return new dtype(n);\n  }\n\n  export function fill(A, b) {\n    // Note, this is faster than the native .fill() method\n    for (let i = 0, len = A.length; i < len; ++i) A[i] = b;\n    return A;\n  }\n\n  export function prod(A) {\n    var prev = 1.0;\n    for (let i = 0, len = A.length; i < len; ++i) prev *= A[i];\n    return prev;\n  }\n\n  export function sum(A) {\n    var prev = 0.0;\n    for (let i = 0, len = A.length; i < len; ++i) prev += A[i];\n    return prev;\n  }\n\n  export function add(A, B) {\n    if (A.length === B.length) {\n      for (let i = 0, len = A.length; i < len; ++i) A[i] += B[i];\n      return A;\n    }\n    else {\n      throw new TypeError(\"Bad input shapes \" + A.length + \" \" + B.length);\n    }\n  }\n\n  export function addConst(A, b) {\n    for (let i = 0, len = A.length; i < len; ++i) A[i] += b;\n    return A;\n  }\n\n  export function sub(A, B) {\n    if (A.length === B.length) {\n      for (let i = 0, len = A.length; i < len; ++i) A[i] -= B[i];\n      return A;\n    }\n    else {\n      throw new TypeError(\"Bad input shape \" + A.length + \" \" + B.length);\n    }\n  }\n\n  export function subConst(A, b) {\n    for (let i = 0, len = A.length; i < len; ++i) A[i] -= b;\n    return A;\n  }\n\n  export function mul(A, B) {\n    if (A.length === B.length) {\n      for (let i = 0, len = A.length; i < len; ++i) A[i] *= B[i];\n      return A;\n    }\n    else {\n      throw new TypeError(\"Bad input shape \" + A.length + \" \" + B.length);\n    }\n  }\n\n  export function mulByConst(A, b) {\n    for (let i = 0, len = A.length; i < len; ++i) A[i] *= b;\n    return A;\n  }\n\n  export function div(A, B) {\n    if (A.length === B.length) {\n      for (let i = 0, len = A.length; i < len; ++i) A[i] /= B[i];\n      return A;\n    }\n    else {\n      throw new TypeError(\"Bad input shape \" + A.length + \" \" + B.length);\n    }\n  }\n\n  export function divByConst(A, b) {\n    for (let i = 0, len = A.length; i < len; ++i) A[i] /= b;\n    return A;\n  }\n\n  export function addScaled(A, B, c) {\n    if (A.length === B.length) {\n      for (let i = 0, len = A.length; i < len; ++i) A[i] += c * B[i];\n      return A;\n    }\n    else {\n      throw new TypeError(\"Bad input shape \" + A.length + \" \" + B.length);\n    }\n  }\n}\n","namespace NumJS {\n\n  export function max(A) {\n    var max_ = Number.NEGATIVE_INFINITY;\n    for (let i = 0, len = A.length; i < len; ++i) {\n      if (A[i] > max_) {\n        max_ = A[i];\n      }\n    }\n    return max_;\n  }\n\n  export function argmax(A) {\n    var max_ = Number.NEGATIVE_INFINITY;\n    var idx = 0;\n    for (let i = 0, len = A.length; i < len; ++i) {\n      if (A[i] > max_) {\n        max_ = A[i];\n        idx = i;\n      }\n    }\n    return idx;\n  }\n\n  export function maxn(A, n) {\n    n = n || 3;\n    return A.slice(0).sort(function(a, b) {\n      return b - a;\n    }).slice(0, n);\n  }\n\n  export function argmaxn(A, n) {\n    n = n || 3;\n    var len = A.length;\n    var indices = new Uint32Array(len);\n    for (let i = 0; i < len; ++i) indices[i] = i;\n    return indices.sort(function(a, b) {\n      return A[b] - A[a];\n    }).slice(0, n);\n  }\n\n  export function maxmin (w): any {\n    if (w.length === 0) {\n      return {};\n    }\n    var maxv = w[0];\n    var minv = w[0];\n    var maxi = 0;\n    var mini = 0;\n    for (let i = 1, len = w.length; i < len; ++i) {\n      if (w[i] > maxv) { maxv = w[i]; maxi = i; }\n      if (w[i] < minv) { minv = w[i]; mini = i; }\n    }\n    return { maxi: maxi, maxv: maxv, mini: mini, minv: minv, dv: maxv - minv };\n  }\n}\n","namespace NumJS {\n  var cached: boolean = false;\n  var cachedVal: number = 0.0;\n\n  export function gaussRandom() {\n    if (cached) {\n      cached = false;\n      return cachedVal;\n    }\n    var u = 2 * Math.random() - 1;\n    var v = 2 * Math.random() - 1;\n    var r = u * u + v * v;\n    if (r == 0 || r > 1) return gaussRandom();\n    var c = Math.sqrt(-2 * Math.log(r) / r);\n    cachedVal = v * c; // cache this\n    cached = true;\n    return u * c;\n  }\n\n  export function randf(a: number, b: number) { return Math.random() * (b - a) + a; }\n  export function randi(a: number, b: number) { return Math.floor(Math.random() * (b - a) + a); }\n  export function randn(mu: number, std: number) { return mu + gaussRandom() * std; }\n\n  // create random permutation of numbers, in range [0...n-1]\n  export function randperm(n) {\n    var i = n;\n    var j = 0;\n    var temp;\n    var arr = [];\n    for(let q = 0; q < n; ++q) arr[q] = q;\n    while (i--) {\n        j = Math.floor(Math.random() * (i+1));\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n    }\n    return arr;\n  }\n}\n","namespace NumJS {\n  export function clip(value, min, max) { return Math.max(Math.min(value, max), min); }\n  export function mod(a, b) { return ((a % b) + b) % b; }\n  export function tanh(x) { var y = Math.exp(2 * x); return (y - 1) / (y + 1); }\n}\n","/// <reference path=\"../NumJS/_module.ts\" />\n\nnamespace Net {\n  \n  const nj = NumJS;\n\n  // sample from list lst according to probabilities in list probs\n  // the two lists are of same size, and probs adds up to 1\n  export function weightedSample(lst, probs) {\n    var p = nj.randf(0, 1.0);\n    var cumprob = 0.0;\n    for (var k = 0, n = lst.length; k < n; k++) {\n      cumprob += probs[k];\n      if (p < cumprob) { return lst[k]; }\n    }\n  }\n\n  // syntactic sugar function for getting default parameter values\n  export function getopt(opt: any = {}, field_name, default_value) {\n    if (typeof field_name === 'string') {\n      // case of single string\n      return (opt[field_name] !== undefined) ? opt[field_name] : default_value;\n    } else {\n      // assume we are given a list of string instead\n      var ret = default_value;\n      field_name.forEach((f) => {\n        ret = opt[f] !== undefined ? opt[f] : ret;\n      });\n      return ret;\n    }\n  }\n\n  export function assert(condition, message) {\n    if (!condition) {\n      message = message || \"Assertion failed\";\n      if (typeof Error !== \"undefined\") {\n        throw new Error(message);\n      }\n      throw message; // Fallback\n    }\n  }\n\n  export function arrContains(arr, elt) {\n    for (var i = 0, n = arr.length; i < n; i++) {\n      if (arr[i] === elt) return true;\n    }\n    return false;\n  }\n\n  export function arrUnique(arr) {\n    var b = [];\n    for (var i = 0, n = arr.length; i < n; i++) {\n      if (!arrContains(b, arr[i])) {\n        b.push(arr[i]);\n      }\n    }\n    return b;\n  }\n}\n\n","/// <reference path=\"../NumJS/_module.ts\" />\n\n//import * as d3 from 'd3';\n\nnamespace Net {\n  \n  // declare variables\n  declare var d3: any;\n\n  const nj = NumJS;\n\n  interface IEdge {\n    from: string;\n    to: string;\n  }\n\n  export class Model {\n\n    public layers: any /*d3.Map<ILayer>*/;\n    public edges: IEdge[];\n\n    constructor(){\n\n    }\n\n    getLayer(name: string): ILayer {\n      return this.layers.get(name);\n    }\n\n    setInputDimensions(width: number, height: number, depth: number = 3) {\n      this.layerIterator((layer: ILayer, i: number, pred: ILayer[]) => {\n        if (i === 0) {\n          layer.in_sx = width;\n          layer.in_sy= height;\n          layer.in_depth = depth;\n          layer.updateDimensions();\n        }\n        else {\n          layer.updateDimensions(pred);\n        }\n      });\n    }\n\n    layerIterator(iteratorFn: (layer: ILayer, i: number, pred: ILayer[]) => any, params: any = {}) {\n      var layerStack: ILayer[] = [];\n      var edges: IEdge[] = [];\n      var layer: ILayer;\n      var i = 0;\n\n      // Store the visited nodes\n      var visited = d3.set();\n\n      // Forward traversal\n      if (params.reverse === undefined || params.reverse === false) {\n        // Define the current layer\n        layer = params.start ? this.layers.get(params.start) : this.layers.get('data');\n        edges = this.edges;\n      }\n      // Backward traversal\n      else {\n        // Define the current layer\n        layer = params.start ? this.layers.get(params.start) : this.layers.values()[this.layers.size() - 1];\n        edges = this.edges.map((d: IEdge) => {\n          return { from: d.to, to: d.from }\n        });\n      }\n\n      // Aggregate all edges by the from property\n      // Reverse edge directions\n      var edgesFrom = d3.map(\n        d3.nest()\n          .key((d: IEdge) => d.from)\n          .entries(edges), (d) => d.key);\n\n      // Aggregate all edges by the to property\n      // Reverse edge directions\n      var edgesTo = d3.map(\n        d3.nest()\n          .key((d: IEdge) => d.to)\n          .entries(edges), (d) => d.key);\n\n      // Start with the first layer\n      layerStack.push(layer);\n\n      while (layerStack.length) {\n        // Take a layer from the stack\n        let layer = layerStack.pop();\n        \n        // Set the layer visited\n        visited.add(layer.name);\n\n        // Collect the previous Layers\n        var parentKeys = edgesTo.get(layer.name);\n        var parents = parentKeys === undefined ? undefined\n          : parentKeys.values.map((d) => this.layers.get(d.from));\n\n        // Call the iterator callback\n        iteratorFn(layer, i++, parents);\n        \n        // Check if we reached the end layer\n        if (params.end && layer.name === params.end) {\n          break;\n        }\n\n        // Get all children for this layer\n        var childrenKeys = edgesFrom.get(layer.name);\n        if (childrenKeys) {\n          childrenKeys.values\n            // Only check adjacent nodes that have\n            // not been visited yet\n            .filter((d) => !visited.has(d.to))\n            .forEach((d) => {\n              // Check if there are still any unvisited parents\n              // of the next child which need to be visited first\n              var parentKeysOfChild = edgesTo.get(d.to);\n              var unvisitedParents = parentKeysOfChild === undefined ? []\n                : parentKeysOfChild.values.filter((d) => !visited.has(d.from));\n\n              // All previous parents have been visited\n              if (unvisitedParents.length === 0) {\n                // Add the layer to the stack\n                layerStack.push(this.layers.get(d.to));\n              }\n            });\n        }\n      }\n    }\n\n    forward(V, is_training = false, params: any = {}) {\n      var activationMap = d3.map();\n      var currentActivation;\n      this.layerIterator((layer, i, parents) => {  \n        if (parents === undefined) {\n          currentActivation = V;\n        }\n        else if (parents.length > 1) {\n          currentActivation = parents.map((d) => activationMap.get(d.name));\n        }\n        else {\n          currentActivation = activationMap.get(parents[0].name);\n        }\n        currentActivation = layer.forward(currentActivation, is_training);  \n        activationMap.set(layer.name, currentActivation);\n      }, params);\n\n      return currentActivation;\n    }\n\n    backward(y, params: any = {}) {\n      params.reverse = true;\n\n      var loss;\n\n      this.layerIterator((layer, i, parents) => {  \n        if (y !== undefined && i === 0) {\n          // last layer assumed to be loss layer\n          loss = layer.backward(y);\n        }\n        else {\n          // backprop to all other layers\n          layer.backward();\n        }\n      }, params);\n\n      return loss;\n    }\n\n    debugStructure(){\n      var numParams = 0;\n      var f = d3.format('s');\n      var f2 = d3.format(',d');\n      var numLayers = 0;\n\n      this.layerIterator((layer, i, pred) => {\n        var numParamsPerLayer = nj.sum(layer.getNumParameters());\n\n        var str = \"\";\n        str += layer.getOutputShape().join('x') + \" :: \";\n        str += layer.getDescription().join(' ');\n\n        if (numParamsPerLayer) {\n          numParams += numParamsPerLayer;\n          str += \" => \" + f2(numParamsPerLayer) + ' parameters';\n        }\n\n        //if (['relu', 'tanh', 'sigmoid'].indexOf(layer.layer_type) === -1) {\n          numLayers += 1;\n          console.log(str);\n        //}\n      });\n\n      console.log('---')\n      console.log('Total number of layers ' + f2(numLayers));\n      console.log('Total number of params ' + f2(numParams) + ' (memory: ' + f(numParams*4) + 'b): ');\n    }\n  }\n}\n","/// <reference path=\"../NumJS/_module.ts\" />\n\nnamespace Net {\n  \n  const nj = NumJS;\n\n  export class Vol {\n\n    public w: Float32Array;\n    public dw: Float32Array;\n\n    constructor(public sx: number, public sy: number, public depth: number, fill?: number) {\n      // we were given dimensions of the vol\n      var n = this.sx * this.sy * this.depth;\n      this.w = nj.zeros(n);\n      // this.dw = nj.zeros(n);\n      if (fill === undefined) {\n        // weight normalization is done to equalize the output\n        // variance of every neuron, otherwise neurons with a lot\n        // of incoming connections have outputs of larger variance\n        let scale = Math.sqrt(1.0 / n);\n        for (let i = 0; i < n; ++i) {\n          this.w[i] = nj.randn(0.0, scale);\n        }\n      }\n      // The weights are already zero filled, so we need to do this\n      // only when using a different constant\n      else if (fill !== 0.0) {\n        nj.fill(this.w, fill);\n      }\n    }\n\n    static fromArray(A: Float32Array): Vol {\n      // we were given a list in A, assume 1D volume and fill it up\n      var vol = new Vol(1, 1, A.length, 0.0);\n      vol.w.set(A);\n      return vol;\n    }\n\n    clone(): Vol {\n      var vol = new Vol(this.sx, this.sy, this.depth, 0.0);\n      vol.w.set(this.w);\n      return vol;\n    }\n\n    cloneAndZero(): Vol {\n      var vol = new Vol(this.sx, this.sy, this.depth, 0.0);\n      return vol;\n    }\n\n    get(x, y, d) {\n      var ix = ((this.sx * y) + x) * this.depth + d;\n      return this.w[ix];\n    }\n\n    set(x, y, d, v) {\n      var ix = ((this.sx * y) + x) * this.depth + d;\n      this.w[ix] = v;\n    }\n\n    add(x, y, d, v) {\n      var ix = ((this.sx * y) + x) * this.depth + d;\n      this.w[ix] += v;\n      return this;\n    }\n\n    sub(x, y, d, v) {\n      var ix = ((this.sx * y) + x) * this.depth + d;\n      this.w[ix] -= v;\n      return this;\n    }\n\n    mul(x, y, d, v) {\n      var ix = ((this.sx * y) + x) * this.depth + d;\n      this.w[ix] *= v;\n      return this;\n    }\n\n    div(x, y, d, v) {\n      var ix = ((this.sx * y) + x) * this.depth + d;\n      this.w[ix] /= v;\n      return this;\n    }\n\n    get_grad(x, y, d) {\n      var ix = ((this.sx * y) + x) * this.depth + d;\n      return this.dw[ix];\n    }\n\n    set_grad(x, y, d, v) {\n      var ix = ((this.sx * y) + x) * this.depth + d;\n      this.dw[ix] = v;\n    }\n\n    add_grad(x, y, d, v) {\n      var ix = ((this.sx * y) + x) * this.depth + d;\n      this.dw[ix] += v;\n    }\n\n    sub_grad(x, y, d, v) {\n      var ix = ((this.sx * y) + x) * this.depth + d;\n      this.dw[ix] -= v;\n    }\n\n    mul_grad(x, y, d, v) {\n      var ix = ((this.sx * y) + x) * this.depth + d;\n      this.dw[ix] *= v;\n    }\n\n    div_grad(x, y, d, v) {\n      var ix = ((this.sx * y) + x) * this.depth + d;\n      this.dw[ix] /= v;\n    }\n\n    roll(ox: number = 0.0, oy: number = 0.0, od: number = 0.0) {\n      var V2 = this.clone();\n      for (let d = 0, depth = V2.depth; d < depth; ++d) {\n        for (let x = 0, sx = V2.sx; x < sx; ++x) {\n          for (let y = 0, sy = V2.sy; y < sy; ++y) {\n            let dval = this.get(nj.mod((x + ox), this.sx), nj.mod((y + oy), this.sy), nj.mod((d + od), this.depth));\n            V2.set(x, y, d, dval);\n          }\n        }\n      }\n      return V2;\n    }\n\n    zoom(zx: number = 1.0, zy: number = 1.0, zd: number = 1.0) {\n      var V2 = new Vol(Math.round(this.sx * zx), Math.round(this.sy * zy), Math.round(this.depth * zd), 0.0);\n      for (let d = 0, depth = V2.depth; d < depth; ++d) {\n        for (let x = 0, sx = V2.sx; x < sx; ++x) {\n          for (let y = 0, sy = V2.sy; y < sy; ++y) {\n            let n = 0;\n            let ox = Math.ceil(1.0 / zx);\n            let oy = Math.ceil(1.0 / zy);\n            let od = Math.ceil(1.0 / zd);\n            let startx = Math.ceil(x / zx);\n            let starty = Math.ceil(y / zy);\n            let startd = Math.ceil(d / zd);\n            let endx = Math.min(startx + ox, this.sx);\n            let endy = Math.min(starty + oy, this.sy);\n            let endd = Math.min(startd + od, this.depth);\n            for (let dx = startx; dx < endx; dx++) {\n              for (let dy = starty; dy < endy; dy++) {\n                for (let dd = startd; dd < endd; dd++) {\n                  let dval = this.get(dx, dy, dd);\n                  V2.add(x, y, d, dval);\n                  n ++;\n                }\n              }\n            }\n            V2.div(x, y, d, n);\n          }\n        }\n      }\n      return V2;\n    }\n    \n    toJSON() {\n      // todo: we may want to only save d most significant digits to save space\n      var json:any = {}\n      json.sx = this.sx;\n      json.sy = this.sy;\n      json.depth = this.depth;\n      json.w = this.w;\n      return json;\n      // we wont back up gradients to save space\n    }\n\n    static fromJSON(json: any) {\n      var vol = new Vol(json.sx, json.sy, json.depth, 0.0);\n      \n      vol.w.set(json.w);\n\n      return vol;\n    }\n  }\n}\n","/// <reference path=\"../../NumJS/_module.ts\" />\n/// <reference path=\"../Vol.ts\" />\n/// <reference path=\"../ILayer.ts\" />\n/// <reference path=\"../Utils.ts\" />\n\nnamespace Net.Layers {\n\n  const nj = NumJS;\n\n  export class BaseLayer {\n    public in_act: Vol | Vol[];\n    public out_act: Vol;\n    \n    public in_depth: number = 1;\n    public in_sy: number = 1;\n    public in_sx: number = 1;\n\n    public out_depth: number = 1;\n    public out_sy: number = 1;\n    public out_sx: number = 1;\n\n    public name: string;\n    public input: string;\n    public output: string;\n    public layer_type: string;\n\n    constructor(opt: any) {\n      this.name = opt.name !== undefined ? opt.name : \"\";\n      this.input = opt.input !== undefined ? opt.input : undefined;\n      this.output = opt.output !== undefined ? opt.output : undefined;\n\n      if (!opt.pred) {\n        this.in_sx = opt.in_sx;\n        this.in_sy = opt.in_sy;\n        this.in_depth = opt.in_depth;\n      }\n    }\n\n    updateDimensions(pred?: ILayer[]) {\n\n      if (pred){\n        this.in_sx = pred[0].out_sx;\n        this.in_sy = pred[0].out_sy;\n        this.in_depth = pred[0].out_depth;\n      }\n\n      this.out_sx = this.in_sx;\n      this.out_sy = this.in_sy;\n      this.out_depth = this.in_depth;\n    }\n\n    resetGradient() {\n      if (this.in_act instanceof Array) {\n        for (var j = 0; j < (<Vol[]>this.in_act).length; j++) {\n          (<Vol[]>this.in_act)[j].dw = nj.zeros((<Vol[]>this.in_act)[j].w.length);\n        }\n      }\n      else {\n        (<Vol>this.in_act).dw = nj.zeros((<Vol>this.in_act).w.length);\n      }\n    }\n\n    getNumParameters() {\n      return [0, 0];\n    }\n\n    getOutputShape() {\n      if (this.in_sy && this.in_sx) {\n        return [this.in_depth, this.in_sy, this.in_sx];\n      }\n      return [this.in_depth];\n    }\n\n    getDescription(){   \n     return [this.layer_type.toUpperCase(), this.name];\n    }\n\n    getParamsAndGrads() {\n      return [];\n    }\n\n    toJSON() {\n      var json: any = {};\n      json.out_depth = this.out_depth;\n      json.out_sx = this.out_sx;\n      json.out_sy = this.out_sy;\n      json.layer_type = this.layer_type;\n      json.name = this.name;\n      json.output = this.output;\n      json.input = this.input;\n      return json;\n    }\n\n    fromJSON(json: any) {\n      this.out_depth = json.out_depth;\n      this.out_sx = json.out_sx;\n      this.out_sy = json.out_sy;\n      this.layer_type = json.layer_type;\n      this.name = json.name;\n      this.output = json.output;\n      this.input = json.input;\n    }\n  }\n}\n","/// <reference path=\"./BaseLayer.ts\" />\n\nnamespace Net.Layers {\n\n  const nj = NumJS;\n\n  export class ConcatLayer extends BaseLayer implements ILayer {\n\n    public layer_type: string = 'concat';\n\n    public in_act: Vol[];\n    public out_act: Vol;\n\n    public axis: number;\n\n    constructor(opt) {\n      super(opt || {});\n\n      this.axis = getopt(opt, ['axis'], 1);\n\n      this.updateDimensions(opt.pred);\n    }\n    \n    forward(Vs, is_training) {\n      this.in_act = Vs;\n      this.resetGradient();\n      var V2 = new Vol(this.out_sx, this.out_sy, this.out_depth, 0.0);\n      var offset = 0;\n      if (this.axis === 0) {\n        var V2w = V2.w;\n        for (var j = 0; j < Vs.length; j++) {\n          V2w.set(Vs[j].w, offset);\n          offset += Vs[j].w.length;\n        }\n      }\n      else {\n        for (let j = 0; j < Vs.length; j++) {\n          let V = Vs[j];\n          for (let d = 0; d < V.depth; d++)\n            for (let x = 0; x < V.sx; x++) {\n              for (let y = 0; y < V.sy; y++) {\n                V2.set(x, y, d + offset, V.get(x, y, d));\n              }\n            }\n          offset += V.depth;\n        }\n      }\n      this.out_act = V2;\n      return this.out_act;\n    }\n\n    backward() {\n      var Vs = this.in_act; // we need to set dw of these\n      var V2 = this.out_act;\n      var offset = 0;\n      if (this.axis === 0) {\n        let V2dw = V2.dw;\n        for (let j = 0; j < Vs.length; j++) {\n          let Vdw = Vs[j].dw;\n          Vdw = nj.add(Vdw, V2dw.slice(offset, offset + Vdw.length));\n          offset += Vdw.length;\n        }\n      }\n      else {\n        for (let j = 0, len = Vs.length; j < len; ++j) {\n          let V = Vs[j];\n          let Vdw = Vs[j].dw;\n          for (let d = 0, depth = V.depth; d < depth; ++d)\n            for (let x = 0, sx = V.sx; x < sx; ++x) {\n              for (let y = 0, sy = V.sy; y < sy; ++y) {\n                V.add_grad(x, y, d, V2.get_grad(x, y, d + offset));\n              }\n            }\n          offset += V.depth;\n        }\n      }\n    }\n\n    updateDimensions(pred: ILayer[]) {\n      if (pred) {\n        // concatenation along num\n        // (n_1 + n_2 + ... + n_K) * c_1 * h * w, and all input c_i should be the same.\n        if (this.axis == 0) {\n          this.in_sx = pred[0].in_sx;\n          this.in_sy = pred[0].in_sy;\n          this.in_depth = pred[0].in_depth;\n        }\n        // concatenate along channels\n        // n_1 * (c_1 + c_2 + ... + c_K) * h * w, and all input n_i should be the same\n        else {\n          this.in_sx = pred[0].in_sx;\n          this.in_sy = pred[0].in_sy;\n          this.in_depth = nj.sum(pred.map((d) => d.out_depth));\n        }\n      }\n      \n      this.out_sx = this.in_sx;\n      this.out_sy = this.in_sy;\n      this.out_depth = this.in_depth;\n    }\n\n    toJSON() {\n      var json: any = super.toJSON();\n      json.axis = this.axis;\n      return json;\n    }\n\n    fromJSON(json:any) {\n      super.fromJSON(json);\n      this.axis = json.axis;\n    }\n  }\n}\n","/// <reference path=\"./BaseLayer.ts\" />\n\nnamespace Net.Layers {\n\n  const nj = NumJS;\n\n  export class ConvLayer extends BaseLayer implements ILayer {\n\n    public layer_type: string = 'conv';\n\n    public in_act: Vol;\n    public out_act: Vol;\n\n    public sx: number;\n    public sy: number;\n    public stride: number;\n    public pad: number;\n    public l1_decay_mul: number;\n    public l2_decay_mul: number;\n    public conv_groups: number;\n\n    public biases: Vol;\n    public filters: Vol[];\n\n    constructor(opt) {\n      super(opt || {});\n\n      // required\n      this.out_depth = opt.filters;\n      \n      // filter size. Should be odd if possible, it's cleaner.\n      this.sx = opt.sx;\n\n      // optional\n      this.sy = getopt(opt, ['sy'], this.sx);\n\n      // stride at which we apply filters to input volume\n      this.stride = getopt(opt, ['stride'], 1);\n      \n      // amount of 0 padding to add around borders of input volume\n      this.pad = getopt(opt, ['pad'], 0);\n      \n      // Convolution groups from AlexNet\n      this.conv_groups = getopt(opt, ['group'], 1);\n\n      this.l1_decay_mul = getopt(opt, ['l1_decay_mul'], 0.0);\n      this.l2_decay_mul = getopt(opt, ['l2_decay_mul'], 1.0);\n\n      this.updateDimensions(opt.pred);\n      \n      // initialize bias\n      var bias = getopt(opt, ['bias_pref'], 0.0);\n      this.biases = new Vol(1, 1, this.out_depth, bias);\n      \n      // initialize filters\n      this.filters = [];\n      var f_depth = Math.ceil(this.in_depth / this.conv_groups);\n      for (let i = 0; i < this.out_depth; ++i) {\n        this.filters.push(new Vol(this.sx, this.sy, f_depth, 0.0));\n      }\n    }\n\n    resetGradient() {\n      super.resetGradient();\n\n      for (let i = 0; i < this.out_depth; ++i) {\n        this.filters[i].dw = nj.zeros((<Vol>this.filters[i]).w.length);\n      } \n      this.biases.dw = nj.zeros(this.out_depth);\n    }\n\n    forward(V, is_training) {\n      // optimized code by @mdda that achieves 2x speedup over previous version\n\n      this.in_act = V;\n      this.resetGradient();\n      var A = new Vol(this.out_sx | 0, this.out_sy | 0, this.out_depth | 0, 0.0);\n\n      var V_sx = V.sx | 0;\n      var V_sy = V.sy | 0;\n      var xy_stride = this.stride | 0;\n      var f_depth = Math.ceil(this.out_depth / this.conv_groups);\n\n      for (var g = 0; g < this.conv_groups; ++g) {\n        var f_start = g * f_depth;\n        var f_end = f_start + f_depth;\n        for (var d = f_start; d < f_end; ++d) {\n          var f = this.filters[d];\n          var x = -this.pad | 0;\n          var y = -this.pad | 0;\n          for (var ay = 0; ay < this.out_sy; y += xy_stride, ++ay) {  // xy_stride\n            x = -this.pad | 0;\n            for (var ax = 0; ax < this.out_sx; x += xy_stride, ++ax) {  // xy_stride\n\n              // convolve centered at this particular location\n              var a = 0.0;\n              for (var fy = 0; fy < f.sy; ++fy) {\n                var oy = y + fy; // coordinates in the original input array coordinates\n                for (var fx = 0; fx < f.sx; ++fx) {\n                  var ox = x + fx;\n                  if (oy >= 0 && oy < V_sy && ox >= 0 && ox < V_sx) {\n                    for (var fd = 0; fd < f.depth; ++fd) {\n                      // avoid function call overhead (x2) for efficiency, compromise modularity :(\n                      a += f.w[((f.sx * fy) + fx) * f.depth + fd] * V.w[((V_sx * oy) + ox) * V.depth * (g+1) + fd];\n                    }\n                  }\n                }\n              }\n              a += this.biases.w[d];\n              A.set(ax, ay, d, a);\n            }\n          }\n        }\n      }\n      this.out_act = A;\n      return this.out_act;\n    }\n\n    backward() {\n      var V = this.in_act;\n      var V_sx = V.sx | 0;\n      var V_sy = V.sy | 0;\n      var xy_stride = this.stride | 0;\n      var group_depth = Math.ceil(this.out_depth / this.conv_groups);\n\n      for (var g = 0; g < this.conv_groups; ++g) {\n        var f_start = g * group_depth;\n        var f_end = f_start + group_depth;\n        for (var d = f_start; d < f_end; ++d) {\n          var f = this.filters[d];\n          var x = -this.pad | 0;\n          var y = -this.pad | 0;\n          for (var ay = 0; ay < this.out_sy; y += xy_stride, ++ay) {  // xy_stride\n            x = -this.pad | 0;\n            for (var ax = 0; ax < this.out_sx; x += xy_stride, ++ax) {  // xy_stride\n\n              // convolve centered at this particular location\n              var chain_grad = this.out_act.get_grad(ax, ay, d); // gradient from above, from chain rule\n              for (var fy = 0; fy < f.sy; ++fy) {\n                var oy = y + fy; // coordinates in the original input array coordinates\n                for (var fx = 0; fx < f.sx; ++fx) {\n                  var ox = x + fx;\n                  if (oy >= 0 && oy < V_sy && ox >= 0 && ox < V_sx) {\n                    for (var fd = 0; fd < f.depth; ++fd) {\n                      // avoid function call overhead (x2) for efficiency, compromise modularity :(\n                      var ix1 = ((V_sx * oy) + ox) * V.depth * (g+1) + fd;\n                      var ix2 = ((f.sx * fy) + fx) * f.depth + fd;\n                      f.dw[ix2] += V.w[ix1] * chain_grad;\n                      V.dw[ix1] += f.w[ix2] * chain_grad;\n                    }\n                  }\n                }\n              }\n              this.biases.dw[d] += chain_grad;\n            }\n          }\n        }\n      }\n    }\n\n    getParamsAndGrads() {\n      var response = [];\n      for (var i = 0; i < this.out_depth; i++) {\n        response.push({\n          params: this.filters[i].w,\n          grads: this.filters[i].dw,\n          l2_decay_mul: this.l2_decay_mul,\n          l1_decay_mul: this.l1_decay_mul\n        });\n      }\n      response.push({\n        params: this.biases.w,\n        grads: this.biases.dw,\n        l1_decay_mul: 0.0,\n        l2_decay_mul: 0.0\n      });\n      return response;\n    }\n\n    updateDimensions(pred: ILayer[]) {\n      if (pred){\n        this.in_sx = pred[0].out_sx;\n        this.in_sy = pred[0].out_sy;\n        this.in_depth = pred[0].out_depth;\n      }\n      \n      var s = this.getOutputShape();\n      this.out_sx = s[1];\n      this.out_sy = s[2];\n    }\n\n    getNumParameters() {\n      return [\n        Math.ceil(this.in_depth * this.sx * this.sy * this.out_depth / this.conv_groups),\n        this.out_depth\n       ];\n    }\n\n    getOutputShape() {\n      return [\n        this.out_depth,\n        Math.round((this.in_sx + this.pad * 2 - this.sx) / this.stride + 1),\n        Math.round((this.in_sy + this.pad * 2 - this.sy) / this.stride + 1),\n      ]\n    }\n\n    getDescription() {\n      return super.getDescription().concat([\n        [this.out_depth, this.sy, this.sx].join('x') + ' stride=' + this.stride + ' pad=' + this.pad\n      ]);\n    }\n\n    toJSON() {\n      var json: any = super.toJSON();\n      json.sx = this.sx; // filter size in x, y dims\n      json.sy = this.sy;\n      json.stride = this.stride;\n      json.in_depth = this.in_depth;\n      json.l1_decay_mul = this.l1_decay_mul;\n      json.l2_decay_mul = this.l2_decay_mul;\n      json.pad = this.pad;\n      json.filters = [];\n      for (var i = 0; i < this.filters.length; i++) {\n        json.filters.push(this.filters[i].toJSON());\n      }\n      json.biases = this.biases.toJSON();\n      return json;\n    }\n\n    fromJSON(json: any) {\n      super.fromJSON(json);\n      this.sx = json.sx; // filter size in x, y dims\n      this.sy = json.sy;\n      this.stride = json.stride;\n      this.in_depth = json.in_depth; // depth of input volume\n      this.filters = [];\n      this.l1_decay_mul = json.l1_decay_mul !== undefined ? json.l1_decay_mul : 0.0;\n      this.l2_decay_mul = json.l2_decay_mul !== undefined ? json.l2_decay_mul : 1.0;\n      this.pad = json.pad !== undefined ? json.pad : 0;\n      for (var i = 0; i < json.filters.length; i++) {\n        this.filters.push(Vol.fromJSON(json.filters[i]));\n      }\n      this.biases = Vol.fromJSON(json.biases);\n    }\n  }\n}\n","/// <reference path=\"./BaseLayer.ts\" />\n\nnamespace Net.Layers {\n\n  const nj = NumJS;\n\n  // An inefficient dropout layer\n  // Note this is not most efficient implementation since the layer before\n  // computed all these activations and now we're just going to drop them :(\n  // same goes for backward pass. Also, if we wanted to be efficient at test time\n  // we could equivalently be clever and upscale during train and copy pointers during test\n  // todo: make more efficient.\n  export class DropoutLayer extends BaseLayer implements ILayer {\n\n    public layer_type: string = 'dropout';\n\n    public in_act: Vol;\n    public out_act: Vol;\n\n    public drop_prob: number;\n    public dropped: Int8Array;\n\n    constructor(opt) {\n      super(opt || {});\n\n      this.drop_prob = getopt(opt, ['drop_prob'], 0.5);\n\n      this.updateDimensions(opt.pred);\n    }\n\n    forward(V, is_training = false) {\n      this.in_act = V;\n      this.resetGradient();\n      this.dropped = nj.zeros(this.out_sx * this.out_sy * this.out_depth, Int8Array);\n      var V2 = V.clone();\n      var N = V.w.length;\n      if (is_training) {\n        // do dropout\n        for (var i = 0; i < N; i++) {\n          // drop!\n          if (Math.random() < this.drop_prob) {\n            V2.w[i] = 0;\n            this.dropped[i] = 1;\n          }\n          else {\n            // scale the activations during training\n            V2.w[i] *= this.drop_prob;\n          }\n        }\n      }\n      this.out_act = V2;\n      return this.out_act; // dummy identity function for now\n    }\n\n    backward() {\n      var V = this.in_act; // we need to set dw of this\n      var chain_grad = this.out_act;\n      var N = V.w.length;\n      for (var i = 0; i < N; i++) {\n        if (this.dropped[i] !== 1) {\n          V.dw[i] += chain_grad.dw[i]; // copy over the gradient\n        }\n      }\n    }\n\n    toJSON() {\n      var json: any = super.toJSON();\n      json.drop_prob = this.drop_prob;\n      return json;\n    }\n\n    fromJSON(json: any) {\n      super.fromJSON(json);\n      this.drop_prob = json.drop_prob;\n    }\n  }\n}\n","/// <reference path=\"./BaseLayer.ts\" />\n\nnamespace Net.Layers {\n\n  const nj = NumJS;\n\n  export class FullyConnectedLayer extends BaseLayer implements ILayer {\n\n    public layer_type: string = 'fc';\n\n    public in_act: Vol;\n    public out_act: Vol;\n\n    public sx: number = 1;\n    public sy: number = 1;\n\n    public num_inputs: number;\n    public l1_decay_mul: number;\n    public l2_decay_mul: number;\n\n    public conv_groups:number = 1;\n\n    public biases: Vol;\n    public filters: Vol[];\n\n    constructor(opt) {\n      super(opt || {});\n\n      // required\n      // ok fine we will allow 'filters' as the word as well\n      this.out_depth = opt.num_neurons !== undefined ? opt.num_neurons : opt.filters;\n\n      // optional \n      this.l1_decay_mul = getopt(opt, ['l1_decay_mul'], 0.0);\n      this.l2_decay_mul = getopt(opt, ['l2_decay_mul'], 1.0);\n      \n      this.updateDimensions(opt.pred);\n\n      // initialize bias\n      var bias = getopt(opt, ['bias_pref'], 0.0);\n      this.biases = new Vol(1, 1, this.out_depth, bias);\n\n      // initialize filters\n      this.filters = [];\n      for (let i = 0; i < this.out_depth; ++i) {\n        this.filters.push(new Vol(1, 1, this.num_inputs, 0.0));\n      }\n\n      if (opt.filters !== undefined) {\n        for (let i = 0; i < this.out_depth; ++i) {\n          this.filters[i].w.set(opt.filters[i]);\n        }\n      }\n\n      if (opt.biases !== undefined) {\n        this.biases.w.set(opt.biases);\n      }\n    }\n\n    resetGradient() {\n      super.resetGradient();\n\n      for (let i = 0; i < this.out_depth; ++i) {\n        this.filters[i].dw = nj.zeros((<Vol>this.filters[i]).w.length);\n      } \n      this.biases.dw = nj.zeros(this.out_depth);\n    }\n\n    forward(V, is_training) {\n      this.in_act = V;\n      this.resetGradient();\n      var A = new Vol(1, 1, this.out_depth, 0.0);\n      var Vw = V.w;\n      for (var i = 0; i < this.out_depth; ++i) {\n        var a = 0.0;\n        var wi = this.filters[i].w;\n        for (var d = 0; d < this.num_inputs; ++d) {\n          a += Vw[d] * wi[d]; // for efficiency use Vols directly for now\n        }\n        a += this.biases.w[i];\n        A.w[i] = a;\n      }\n      this.out_act = A;\n      return this.out_act;\n    }\n\n    backward() {\n      var V = this.in_act;\n\n      // compute gradient wrt weights and data\n      for (var i = 0; i < this.out_depth; ++i) {\n        var tfi = this.filters[i];\n        var chain_grad = this.out_act.dw[i];\n        for (var d = 0; d < this.num_inputs; ++d) {\n          V.dw[d] += tfi.w[d] * chain_grad; // grad wrt input data\n          tfi.dw[d] += V.w[d] * chain_grad; // grad wrt params\n        }\n        this.biases.dw[i] += chain_grad;\n      }\n    }\n\n    getParamsAndGrads() {\n      var response = [];\n      for (var i = 0; i < this.out_depth; ++i) {\n        response.push({\n          params: this.filters[i].w,\n          grads: this.filters[i].dw,\n          l1_decay_mul: this.l1_decay_mul,\n          l2_decay_mul: this.l2_decay_mul\n        });\n      }\n      response.push({\n        params: this.biases.w,\n        grads: this.biases.dw,\n        l1_decay_mul: 0.0,\n        l2_decay_mul: 0.0\n      });\n      return response;\n    }\n\n    updateDimensions(pred: ILayer[]) {\n      if (pred){\n        this.in_sx = pred[0].out_sx;\n        this.in_sy = pred[0].out_sy;\n        this.in_depth = pred[0].out_depth;\n      }\n\n      this.num_inputs = this.in_sx * this.in_sy * this.in_depth;\n    }\n\n    getNumParameters() {\n      return [this.in_depth * this.in_sx * this.in_sy * this.out_depth, this.out_depth];\n    }\n\n    getOutputShape() {\n      return [this.out_depth, 1, 1]\n    }\n\n    getDescription(){   \n     return [this.layer_type.toUpperCase(), this.name, this.out_depth.toString()];\n    }\n\n    toJSON() {\n      var json: any = super.toJSON();\n      json.num_inputs = this.num_inputs;\n      json.l1_decay_mul = this.l1_decay_mul;\n      json.l2_decay_mul = this.l2_decay_mul;\n      json.filters = [];\n      for (var i = 0; i < this.filters.length; i++) {\n        json.filters.push(this.filters[i].toJSON());\n      }\n      json.biases = this.biases.toJSON();\n      return json;\n    }\n\n    fromJSON(json: any) {\n      super.fromJSON(json);\n      this.num_inputs = json.num_inputs;\n      this.l1_decay_mul = json.l1_decay_mul !== undefined ? json.l1_decay_mul : 1.0;\n      this.l2_decay_mul = json.l2_decay_mul !== undefined ? json.l2_decay_mul : 1.0;\n      this.filters = [];\n      for (var i = 0; i < json.filters.length; i++) {\n        this.filters.push(Vol.fromJSON(json.filters[i]));\n      }\n      this.biases = Vol.fromJSON(json.biases);\n    }\n  }\n}\n","/// <reference path=\"./BaseLayer.ts\" />\n\nnamespace Net.Layers {\n\n  const nj = NumJS;\n\n  export class InputLayer extends BaseLayer implements ILayer {\n\n    public layer_type: string = 'input';\n\n    public in_act: Vol;\n    public out_act: Vol;\n\n    constructor(opt) {\n      super(opt || {});\n\n      // required: depth\n      this.in_depth = getopt(opt, ['in_depth', 'out_depth', 'depth'], 0);\n\n      // optional: default these dimensions to 1\n      this.in_sx = getopt(opt, ['in_sx', 'out_sx', 'sx', 'width'], 1);\n      this.in_sy = getopt(opt, ['in_sy', 'out_sy', 'sy', 'height'], 1);\n\n      this.updateDimensions();\n    }\n    \n    forward (V, is_training) {\n      this.in_act = V;\n      this.resetGradient();\n      this.out_act = V;\n      return this.out_act; // simply identity function for now\n    }\n\n    backward() {}\n  }\n}\n","/// <reference path=\"./BaseLayer.ts\" />\n\nnamespace Net.Layers {\n\n  const nj = NumJS;\n\n  // a bit experimental layer for now. I think it works but I'm not 100%\n  // the gradient check is a bit funky. I'll look into this a bit later.\n  // Local Response Normalization in window, along depths of volumes\n  export class LocalResponseNormalizationLayer extends BaseLayer implements ILayer {\n\n    public layer_type: string = 'lrn';\n\n    public in_act: Vol;\n    public out_act: Vol;\n\n    public k: number;\n    public n: number;\n    public alpha: number;\n    public beta: number;\n\n    private S_cache_: Vol;\n\n    constructor(opt) {\n      super(opt || {});\n\n      // required\n      this.k = opt.k;\n      this.n = opt.n;\n      this.alpha = opt.alpha;\n      this.beta = opt.beta;\n\n      // checks\n      if (this.n % 2 === 0) {\n        console.warn('WARNING n should be odd for LRN layer');\n      }\n\n      this.updateDimensions(opt.pred);\n    }\n\n    forward(V, is_training) {\n      this.in_act = V;\n      this.resetGradient();\n      var A = V.cloneAndZero();\n      this.S_cache_ = V.cloneAndZero();\n      var n2 = Math.floor(this.n / 2);\n      for (var x = 0; x < V.sx; x++) {\n        for (var y = 0; y < V.sy; y++) {\n          for (var i = 0; i < V.depth; i++) {\n\n            var a_i = V.get(x, y, i);\n            var f0 = this.k;\n            var f1 = this.alpha / this.n;\n            var sum = 0.0;\n\n            // normalize in a window of size n\n            for (var j = Math.max(0, i - n2); j <= Math.min(i + n2, V.depth - 1); j++) {\n              var aa = V.get(x, y, j);\n              sum += aa * aa;\n            }\n\n            // will be useful for backprop\n            var scale_i = f0 + f1 * sum;\n            this.S_cache_.set(x, y, i, scale_i);\n            var b_i = a_i * Math.pow(scale_i, -this.beta);\n            A.set(x, y, i, b_i);\n          }\n        }\n      }\n\n      this.out_act = A;\n      return this.out_act; // dummy identity function for now\n    }\n\n    backward() {\n      // evaluate gradient wrt data\n      var V = this.in_act; // we need to set dw of this\n      var A = this.out_act; // computed in forward pass \n\n      var n2 = Math.floor(this.n / 2);\n      for (var x = 0; x < V.sx; x++) {\n        for (var y = 0; y < V.sy; y++) {\n          for (var i = 0; i < V.depth; i++) {\n\n            var scale_i = this.S_cache_.get(x, y, i);\n            var a_i = V.get(x, y, i);\n            var be_i = A.get_grad(x, y, i);\n            var f0 = Math.pow(scale_i, -this.beta) * be_i;\n            var f1 = 2.0 * this.alpha * this.beta / this.n * a_i;\n            var sum = 0.0;\n\n            // normalize in a window of size n\n            for (var j = Math.max(0, i - n2); j <= Math.min(i + n2, V.depth - 1); j++) {\n              var b_j = A.get(x, y, j);\n              var be_j = A.get_grad(x, y, j);\n              var scale_j = this.S_cache_.get(x, y, j);\n\n              sum += be_j * b_j / scale_j;\n            }\n\n            var ae_i = f0 - f1 * sum;\n            V.add_grad(x, y, i, ae_i);\n          }\n        }\n      }\n    }\n\n    getDescription() {\n      return super.getDescription().concat([\n        'n=' + this.n + ' ' + 'k=' + this.k,\n      ]);\n    }\n\n    toJSON() {\n      var json: any = super.toJSON();\n      json.k = this.k;\n      json.n = this.n;\n      json.alpha = this.alpha; // normalize by size\n      json.beta = this.beta;\n      return json;\n    }\n\n    fromJSON(json: any) {\n      super.fromJSON(json);\n      this.k = json.k;\n      this.n = json.n;\n      this.alpha = json.alpha; // normalize by size\n      this.beta = json.beta;\n    }\n  }\n}\n","/// <reference path=\"./BaseLayer.ts\" />\n\nnamespace Net.Layers {\n\n  const nj = NumJS;\n\n  // Implements Maxout nonlinearity that computes x -> max(x)\n  // where x is a vector of size group_size. Ideally of course,\n  // the input size should be exactly divisible by group_size\n  export class MaxoutLayer extends BaseLayer implements ILayer {\n\n    public layer_type: string = 'maxout';\n\n    public in_act: Vol;\n    public out_act: Vol;\n\n    public group_size: number;\n    public switches: Uint32Array;\n\n    constructor(opt) {\n      super(opt || {});\n\n      // required\n      this.group_size = opt.group_size !== undefined ? opt.group_size : 2;\n\n      this.updateDimensions(opt.pred);\n    }\n\n    forward(V, is_training) {\n      this.in_act = V;\n      this.resetGradient();\n      this.switches = nj.zeros(this.out_sx * this.out_sy * this.out_depth, Uint32Array); // useful for backprop\n      \n      var N = this.out_depth;\n      var V2 = new Vol(this.out_sx, this.out_sy, this.out_depth, 0.0);\n\n      // optimization branch. If we're operating on 1D arrays we dont have\n      // to worry about keeping track of x,y,d coordinates inside\n      // input volumes. In convnets we do :(\n      if (this.out_sx === 1 && this.out_sy === 1) {\n        for (var i = 0; i < N; i++) {\n          var ix = i * this.group_size; // base index offset\n          var a = V.w[ix];\n          var ai = 0;\n          for (var j = 1; j < this.group_size; j++) {\n            var a2 = V.w[ix + j];\n            if (a2 > a) {\n              a = a2;\n              ai = j;\n            }\n          }\n          V2.w[i] = a;\n          this.switches[i] = ix + ai;\n        }\n      } else {\n        var n = 0; // counter for switches\n        for (var x = 0; x < V.sx; x++) {\n          for (var y = 0; y < V.sy; y++) {\n            for (var i = 0; i < N; i++) {\n              var ix = i * this.group_size;\n              var a = V.get(x, y, ix);\n              var ai = 0;\n              for (var j = 1; j < this.group_size; j++) {\n                var a2 = V.get(x, y, ix + j);\n                if (a2 > a) {\n                  a = a2;\n                  ai = j;\n                }\n              }\n              V2.set(x, y, i, a);\n              this.switches[n] = ix + ai;\n              n++;\n            }\n          }\n        }\n\n      }\n      this.out_act = V2;\n      return this.out_act;\n    }\n\n    backward() {\n      var V = this.in_act; // we need to set dw of this\n      var V2 = this.out_act;\n      var N = this.out_depth;\n\n      // pass the gradient through the appropriate switch\n      if (this.out_sx === 1 && this.out_sy === 1) {\n        for (var i = 0; i < N; i++) {\n          var chain_grad = V2.dw[i];\n          V.dw[this.switches[i]] += chain_grad;\n        }\n      } else {\n        // bleh okay, lets do this the hard way\n        var n = 0; // counter for switches\n        for (var x = 0; x < V2.sx; x++) {\n          for (var y = 0; y < V2.sy; y++) {\n            for (var i = 0; i < N; i++) {\n              var chain_grad = V2.get_grad(x, y, i);\n              V.add_grad(x, y, this.switches[n], chain_grad);\n              n++;\n            }\n          }\n        }\n      }\n    }\n\n    updateDimensions(pred: ILayer[]) {\n\n      if (pred){\n        this.in_sx = pred[0].out_sx;\n        this.in_sy = pred[0].out_sy;\n        this.in_depth = pred[0].out_depth;\n      }\n\n      this.out_sx = this.in_sx;\n      this.out_sy = this.in_sy;\n      this.out_depth = Math.floor(this.in_depth / this.group_size);\n    }\n\n    toJSON() {\n      var json: any = super.toJSON();\n      json.group_size = this.group_size;\n      return json;\n    }\n\n    fromJSON(json: any) {\n      super.fromJSON(json);\n      this.group_size = json.group_size;\n    }\n  }\n}\n","/// <reference path=\"./BaseLayer.ts\" />\n\nnamespace Net.Layers {\n\n  const nj = NumJS;\n\n  export class PoolLayer extends BaseLayer implements ILayer {\n\n    public layer_type: string = 'pool';\n\n    public in_act: Vol;\n    public out_act: Vol;\n\n    public sx: number;\n    public sy: number;\n    public stride: number;\n    public pad: number;\n    public pool: string;\n\n    public biases: Vol;\n    public filters: Vol[];\n\n    public switchx: Uint32Array;\n    public switchy: Uint32Array;\n\n    constructor(opt) {\n      super(opt || {});\n\n      // required\n      this.out_depth = opt.filters;\n\n      this.pool = getopt(opt, ['pool'], 'MAX');;\n\n      if (getopt(opt, ['global_pooling'], false)) {\n        \n        // Get the dimensions of the previous layer\n        this.sx = opt.pred[0].out_sx;\n        this.sy = opt.pred[0].out_sy;\n      }\n      else {\n        \n        // filter size. Should be odd if possible, it's cleaner.\n        this.sx = opt.sx;\n\n        // optional\n        this.sy = getopt(opt, ['sy'], this.sx);\n      }\n\n      // stride at which we apply filters to input volume\n      this.stride = getopt(opt, ['stride'], 1);\n\n      // amount of 0 padding to add around borders of input volume\n      this.pad = getopt(opt, ['pad'], 0);\n\n      this.updateDimensions(opt.pred);\n    }\n    \n    forward(V, is_training) {\n      this.in_act = V;\n      this.resetGradient();\n      this.switchx = nj.zeros(this.out_sx * this.out_sy * this.out_depth);\n      this.switchy = nj.zeros(this.out_sx * this.out_sy * this.out_depth);\n\n      var A = new Vol(this.out_sx, this.out_sy, this.out_depth, 0.0);\n\n      if (this.pool === 'AVE') {\n        let n = this.sx * this.sy;\n        for (let d = 0; d < this.out_depth; ++d) {\n          for (let ax = 0; ax < this.out_sx; ++ax) {\n            for (let ay = 0; ay < this.out_sy; ++ay) {\n              let v = 0.0;\n              let xstart = ax * this.stride - this.pad;\n              let ystart = ay * this.stride - this.pad;\n              let xend = Math.min(xstart + this.sx, V.sx + this.pad);\n              let yend = Math.min(ystart + this.sy, V.sy + this.pad);\n              xstart = Math.max(xstart, 0);\n              ystart = Math.max(ystart, 0);\n              xend = Math.min(xend, V.sx);\n              yend = Math.min(yend, V.sy);\n              let pool_size = (xend - xstart) * (yend - ystart);\n              // perform average pooling\n              for (let x = xstart; x < xend; ++x) {\n                for (let y = ystart; y < yend; ++y) {\n                  v += V.get(x, y, d);\n                }\n              }\n              A.set(ax, ay, d, v / pool_size);\n            }\n          }\n        }\n      }\n      else {\n        var n = 0; // a counter for switches\n        for (var d = 0; d < this.out_depth; ++d) {\n          var x = -this.pad;\n          var y = -this.pad;\n          for (var ax = 0; ax < this.out_sx; x += this.stride, ax++) {\n            y = -this.pad;\n            for (var ay = 0; ay < this.out_sy; y += this.stride, ay++) {\n\n              // convolve centered at this particular location\n              var a = -99999; // hopefully small enough ;\\\n              var winx = -1, winy = -1;\n              for (var fx = 0; fx < this.sx; ++fx) {\n                for (var fy = 0; fy < this.sy; ++fy) {\n                  var oy = y + fy;\n                  var ox = x + fx;\n                  if (oy >= 0 && oy < V.sy && ox >= 0 && ox < V.sx) {\n                    var v = V.get(ox, oy, d);\n                    // perform max pooling and store pointers to where\n                    // the max came from. This will speed up backprop \n                    // and can help make nice visualizations in future\n                    if (v > a) { a = v; winx = ox; winy = oy; }\n                  }\n                }\n              }\n              this.switchx[n] = winx;\n              this.switchy[n] = winy;\n              n++;\n              A.set(ax, ay, d, a);\n            }\n          }\n        }\n      }\n      this.out_act = A;\n      return this.out_act;\n    }\n\n    backward() {\n      // pooling layers have no parameters, so simply compute \n      // gradient wrt data here\n      var V = this.in_act;\n      var A = this.out_act; // computed in forward pass \n\n      if (this.pool === 'AVE') {\n        // TODO \n        // backprop for average pooling\n      }\n      else {\n        var n = 0;\n        for (var d = 0; d < this.out_depth; ++d) {\n          var x = -this.pad;\n          for (var ax = 0; ax < this.out_sx; x += this.stride, ax++) {\n            var y = -this.pad;\n            for (var ay = 0; ay < this.out_sy; y += this.stride, ay++) {\n              var chain_grad = this.out_act.get_grad(ax, ay, d);\n              V.add_grad(this.switchx[n], this.switchy[n], d, chain_grad);\n              n++;\n            }\n          }\n        }\n      }\n    }\n\n    updateDimensions(pred: ILayer[]) {\n      if (pred){\n        this.in_sx = pred[0].out_sx;\n        this.in_sy = pred[0].out_sy;\n        this.in_depth = pred[0].out_depth;\n      }\n\n      var s = this.getOutputShape();\n      this.out_sx = s[1];\n      this.out_sy = s[2];\n      this.out_depth = this.in_depth;\n    }\n\n    getOutputShape() {\n      return [\n        this.out_depth,\n        // using ceil do to Caffe compatibility\n        // https://github.com/BVLC/caffe/issues/1318\n        // https://github.com/BVLC/caffe/issues/4252\n        Math.ceil((this.in_sx + this.pad * 2 - this.sx) / this.stride + 1),\n        Math.ceil((this.in_sy + this.pad * 2 - this.sy) / this.stride + 1),\n      ]\n    }\n\n    getDescription() {\n      return [\n        this.pool + \" \" + this.layer_type.toUpperCase(), \n        this.name,\n        [this.sy, this.sx].join('x') + ' stride=' + this.stride + ' pad=' + this.pad\n      ];\n    }\n\n    toJSON() {\n      var json: any = super.toJSON();\n      json.sx = this.sx;\n      json.sy = this.sy;\n      json.stride = this.stride;\n      json.pool = this.pool;\n      json.in_depth = this.in_depth;\n      json.pad = this.pad;\n      return json;\n    }\n\n    fromJSON(json: any) {\n      super.fromJSON(json);\n      this.pool = json.pool !== undefined ? json.pool : 'MAX';\n      this.sx = json.sx;\n      this.sy = json.sy;\n      this.stride = json.stride;\n      this.in_depth = json.in_depth;\n      this.pad = json.pad !== undefined ? json.pad : 0; // backwards compatibility\n      this.switchx = nj.zeros(this.out_sx * this.out_sy * this.out_depth, Uint32Array); // need to re-init these appropriately\n      this.switchy = nj.zeros(this.out_sx * this.out_sy * this.out_depth, Uint32Array);\n    }\n  }\n}\n","/// <reference path=\"./BaseLayer.ts\" />\n\nnamespace Net.Layers {\n\n  const nj = NumJS;\n\n  // implements an L2 regression cost layer,\n  // so penalizes \\sum_i(||x_i - y_i||^2), where x is its input\n  // and y is the user-provided array of \"correct\" values.\n  export class RegressionLayer extends BaseLayer implements ILayer {\n\n    public layer_type: string = 'regression';\n\n    public in_act: Vol;\n    public out_act: Vol;\n\n    public num_inputs: number;\n\n    constructor(opt) {\n      super(opt || {});\n\n      this.updateDimensions(opt.pred);\n    }\n\n    forward(V, is_training) {\n      this.in_act = V;\n      this.resetGradient();\n      this.out_act = V;\n      return V; // identity function\n    }\n\n    // y is a list here of size num_inputs\n    // or it can be a number if only one value is regressed\n    // or it can be a struct {dim: i, val: x} where we only want to \n    // regress on dimension i and asking it to have value x\n    backward(y) {\n\n      // compute and accumulate gradient wrt weights and bias of this layer\n      var x = this.in_act;\n      var loss = 0.0;\n      if (y instanceof Float32Array) {\n        for (let i = 0; i < this.out_depth; i++) {\n          let dy = x.w[i] - y[i];\n          x.dw[i] = dy;\n          loss += 0.5 * dy * dy;\n        }\n      } else if (typeof y === 'number') {\n        // lets hope that only one number is being regressed\n        let dy = x.w[0] - y;\n        x.dw[0] = dy;\n        loss += 0.5 * dy * dy;\n      } else {\n        // assume it is a struct with entries .dim and .val\n        // and we pass gradient only along dimension dim to be equal to val\n        let i = y.dim;\n        let yi = y.val;\n        let dy = x.w[i] - yi;\n        x.dw[i] = dy;\n        loss += 0.5 * dy * dy;\n      }\n      return loss;\n    }\n\n    updateDimensions(pred: ILayer[]) {\n      if (pred){\n        this.in_sx = pred[0].out_sx;\n        this.in_sy = pred[0].out_sy;\n        this.in_depth = pred[0].out_depth;\n      }\n      \n      this.num_inputs = this.in_sx * this.in_sy * this.in_depth;\n      this.out_depth = this.num_inputs;\n    }\n\n    getOutputShape() {\n      return [this.out_depth, 1, 1]\n    }\n\n    toJSON() {\n      var json: any = super.toJSON();\n      json.num_inputs = this.num_inputs;\n      return json;\n    }\n\n    fromJSON(json: any) {\n      super.fromJSON(json);\n      this.num_inputs = json.num_inputs;\n    }\n  }\n}\n","/// <reference path=\"./BaseLayer.ts\" />\n\nnamespace Net.Layers {\n\n  const nj = NumJS;\n\n  // Implements ReLU nonlinearity elementwise\n  // x -> max(0, x)\n  // the output is in [0, inf)\n  export class ReluLayer extends BaseLayer implements ILayer {\n\n    public layer_type: string = 'relu';\n\n    public in_act: Vol;\n    public out_act: Vol;\n\n    constructor(opt) {\n      super(opt || {});\n\n      this.updateDimensions(opt.pred);\n    }\n\n    forward(V, is_training) {\n      this.in_act = V;\n      this.resetGradient();\n      var V2 = V.clone();\n      var N = V.w.length;\n      var V2w = V2.w;\n      for (var i = 0; i < N; i++) {\n        if (V2w[i] < 0) V2w[i] = 0; // threshold at 0\n      }\n      this.out_act = V2;\n      return this.out_act;\n    }\n\n    backward() {\n      var V = this.in_act; // we need to set dw of this\n      var V2 = this.out_act;\n      var N = V.w.length;\n      for (var i = 0; i < N; i++) {\n        if (V2.w[i] <= 0) V.dw[i] = 0; // threshold\n        else V.dw[i] += V2.dw[i];\n      }\n    }\n  }\n}\n","/// <reference path=\"./BaseLayer.ts\" />\n\nnamespace Net.Layers {\n\n  const nj = NumJS;\n\n  // implements an L2 regression cost layer,\n  // so penalizes \\sum_i(||x_i - y_i||^2), where x is its input\n  // and y is the user-provided array of \"correct\" values.\n  export class SVMLayer extends BaseLayer implements ILayer {\n\n    public layer_type: string = 'svm';\n\n    public in_act: Vol;\n    public out_act: Vol;\n\n    public num_inputs: number;\n\n    constructor(opt) {\n      super(opt || {});\n      \n      this.updateDimensions(opt.pred);\n    }\n\n    forward(V, is_training) {\n      this.in_act = V;\n      this.resetGradient();\n      this.out_act = V;\n      return V; // identity function\n    }\n\n    backward(y) {\n\n      // compute and accumulate gradient wrt weights and bias of this layer\n      var x = this.in_act;\n\n      // we're using structured loss here, which means that the score\n      // of the ground truth should be higher than the score of any other \n      // class, by a margin\n      var yscore = x.w[y]; // score of ground truth\n      var margin = 1.0;\n      var loss = 0.0;\n      for (var i = 0; i < this.out_depth; i++) {\n        if (y === i) { continue; }\n        var ydiff = -yscore + x.w[i] + margin;\n        if (ydiff > 0) {\n          // violating dimension, apply loss\n          x.dw[i] += 1;\n          x.dw[y] -= 1;\n          loss += ydiff;\n        }\n      }\n\n      return loss;\n    }\n\n    updateDimensions(pred: ILayer[]) {\n\n      if (pred){\n        this.in_sx = pred[0].out_sx;\n        this.in_sy = pred[0].out_sy;\n        this.in_depth = pred[0].out_depth;\n      }\n      \n      this.num_inputs = this.in_sx * this.in_sy * this.in_depth;\n      this.out_depth = this.num_inputs;\n    }\n\n    getOutputShape() {\n      return [this.out_depth, 1, 1]\n    }\n\n    toJSON() {\n      var json: any = super.toJSON();\n      json.num_inputs = this.num_inputs;\n      return json;\n    }\n\n    fromJSON(json: any) {\n      super.fromJSON(json);\n      this.num_inputs = json.num_inputs;\n    }\n  }\n}\n","/// <reference path=\"./BaseLayer.ts\" />\n\nnamespace Net.Layers {\n\n  const nj = NumJS;\n\n  // Implements Sigmoid nnonlinearity elementwise\n  // x -> 1/(1+e^(-x))\n  // so the output is between 0 and 1.\n  export class SigmoidLayer extends BaseLayer implements ILayer {\n\n    public layer_type: string = 'sigmoid';\n\n    public in_act: Vol;\n    public out_act: Vol;\n\n    constructor(opt) {\n      super(opt || {});\n\n      this.updateDimensions(opt.pred);\n    }\n\n    forward(V, is_training) {\n      this.in_act = V;\n      this.resetGradient();\n      var V2 = V.cloneAndZero();\n      var N = V.w.length;\n      var V2w = V2.w;\n      var Vw = V.w;\n      for (var i = 0; i < N; i++) {\n        V2w[i] = 1.0 / (1.0 + Math.exp(-Vw[i]));\n      }\n      this.out_act = V2;\n      return this.out_act;\n    }\n\n    backward() {\n      var V = this.in_act; // we need to set dw of this\n      var V2 = this.out_act;\n      var N = V.w.length;\n      for (var i = 0; i < N; i++) {\n        var v2wi = V2.w[i];\n        V.dw[i] += v2wi * (1.0 - v2wi) * V2.dw[i];\n      }\n    }\n  }\n}\n","/// <reference path=\"./BaseLayer.ts\" />\n\nnamespace Net.Layers {\n\n  const nj = NumJS;\n\n  // This is a classifier, with N discrete classes from 0 to N-1\n  // it gets a stream of N incoming numbers and computes the softmax\n  // function (exponentiate and normalize to sum to 1 as probabilities should)\n  export class SoftmaxLayer extends BaseLayer implements ILayer {\n\n    public layer_type: string = 'softmax';\n\n    public in_act: Vol;\n    public out_act: Vol;\n\n    public num_inputs: number;\n    private es: Float32Array;\n\n    constructor(opt) {\n      super(opt || {});\n\n      this.updateDimensions(opt.pred);\n    }\n\n    forward(V, is_training) {\n      this.in_act = V;\n      this.resetGradient();\n\n      var A = new Vol(1, 1, this.out_depth, 0.0);\n\n      // compute max activation\n      var as = V.w;\n      var amax = V.w[0];\n      for(var i=1;i<this.out_depth;i++) {\n        if(as[i] > amax) amax = as[i];\n      }\n\n      // compute exponentials (carefully to not blow up)\n      var es = nj.zeros(this.out_depth);\n      var esum = 0.0;\n      for(var i=0;i<this.out_depth;i++) {\n        var e = Math.exp(as[i] - amax);\n        esum += e;\n        es[i] = e;\n      }\n\n      // normalize and output to sum to one\n      for(var i=0;i<this.out_depth;i++) {\n        es[i] /= esum;\n        A.w[i] = es[i];\n      }\n\n      this.es = es; // save these for backprop\n      this.out_act = A;\n      return this.out_act;\n    }\n\n    backward(y) {\n\n      // compute and accumulate gradient wrt weights and bias of this layer\n      var x = this.in_act;\n\n      for (var i = 0; i < this.out_depth; i++) {\n        var indicator = i === y ? 1.0 : 0.0;\n        var mul = -(indicator - this.es[i]);\n        x.dw[i] += mul;\n      }\n\n      // loss is the class negative log likelihood\n      return -Math.log(this.es[y]);\n    }\n\n    updateDimensions(pred: ILayer[]) {\n\n      if (pred){\n        this.in_sx = pred[0].out_sx;\n        this.in_sy = pred[0].out_sy;\n        this.in_depth = pred[0].out_depth;\n      }\n\n      this.num_inputs = this.in_sx * this.in_sy * this.in_depth;\n      this.out_depth = this.num_inputs;\n    }\n\n    getOutputShape() {\n      return [this.out_depth, 1, 1]\n    }\n\n    toJSON() {\n      var json: any = super.toJSON();\n      json.num_inputs = this.num_inputs;\n      return json;\n    }\n\n    fromJSON(json: any) {\n      super.fromJSON(json);\n      this.num_inputs = json.num_inputs;\n    }\n  }\n}","/// <reference path=\"./BaseLayer.ts\" />\n\nnamespace Net.Layers {\n\n  const nj = NumJS;\n\n  // Implements Tanh nnonlinearity elementwise\n  // x -> tanh(x) \n  // so the output is between -1 and 1.\n  export class TanhLayer extends BaseLayer implements ILayer {\n\n    public layer_type: string = 'tanh';\n\n    public in_act: Vol;\n    public out_act: Vol;\n\n    constructor(opt) {\n      super(opt || {});\n\n      this.updateDimensions(opt.pred);\n    }\n\n    forward(V, is_training) {\n      this.in_act = V;\n      this.resetGradient();\n      var V2 = V.cloneAndZero();\n      var N = V.w.length;\n      for (var i = 0; i < N; i++) {\n        V2.w[i] = nj.tanh(V.w[i]);\n      }\n      this.out_act = V2;\n      return this.out_act;\n    }\n\n    backward() {\n      var V = this.in_act; // we need to set dw of this\n      var V2 = this.out_act;\n      var N = V.w.length;\n      for (var i = 0; i < N; i++) {\n        var v2wi = V2.w[i];\n        V.dw[i] += (1.0 - v2wi * v2wi) * V2.dw[i];\n      }\n    }\n  }\n}","namespace Parser {\n\n  export abstract class TextParser {\n\n    constructor() {}\n\n    protected fetch(url: string) {\n      var req = new Request(url);\n      return fetch(req).then((response) => response.text());\n    }\n\n    public parse(url: string) {\n      return this.fetch(url).then((response) => this.parseString(response));\n    }\n\n    abstract parseString(raw: string);\n  }  \n}\n","namespace Parser {\n\n  export abstract class BinaryParser {\n\n    constructor() {\n      \n    }\n\n    protected fetch(url: string) {\n      var req = new Request(url);\n      return fetch(req).then((response) => response.arrayBuffer());\n    }\n\n    public parse(url: string) {\n      return this.fetch(url).then((response) => this.parseBuffer(response));\n    }\n\n    abstract parseBuffer(raw: ArrayBuffer);\n  }\n}\n","/// <reference path=\"./BinaryParser.ts\" />\n\nnamespace Parser {\n\n  // declare Protobuf decoder\n  declare var dcodeIO: any;\n\n  export abstract class BinaryprotoParser extends BinaryParser {\n\n    parseBuffer(raw: ArrayBuffer){\n      \n\n      var _ = dcodeIO.ProtoBuf.newBuilder({})['import']({\n        \"package\": \"caffe\",\n        \"messages\": [\n          {\n            \"name\": \"BlobShape\",\n            \"fields\": [\n              {\n                \"rule\": \"repeated\",\n                \"type\": \"int64\",\n                \"name\": \"dim\",\n                \"id\": 1,\n                \"options\": {\n                  \"packed\": true\n                }\n              }\n            ]\n          },\n          {\n            \"name\": \"BlobProto\",\n            \"fields\": [\n              {\n                \"rule\": \"optional\",\n                \"type\": \"BlobShape\",\n                \"name\": \"shape\",\n                \"id\": 7\n              },\n              {\n                \"rule\": \"repeated\",\n                \"type\": \"float\",\n                \"name\": \"data\",\n                \"id\": 5,\n                \"options\": {\n                  \"packed\": true\n                }\n              },\n              {\n                \"rule\": \"repeated\",\n                \"type\": \"float\",\n                \"name\": \"diff\",\n                \"id\": 6,\n                \"options\": {\n                  \"packed\": true\n                }\n              },\n              {\n                \"rule\": \"repeated\",\n                \"type\": \"double\",\n                \"name\": \"double_data\",\n                \"id\": 8,\n                \"options\": {\n                  \"packed\": true\n                }\n              },\n              {\n                \"rule\": \"repeated\",\n                \"type\": \"double\",\n                \"name\": \"double_diff\",\n                \"id\": 9,\n                \"options\": {\n                  \"packed\": true\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"int32\",\n                \"name\": \"num\",\n                \"id\": 1,\n                \"options\": {\n                  \"default\": 0\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"int32\",\n                \"name\": \"channels\",\n                \"id\": 2,\n                \"options\": {\n                  \"default\": 0\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"int32\",\n                \"name\": \"height\",\n                \"id\": 3,\n                \"options\": {\n                  \"default\": 0\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"int32\",\n                \"name\": \"width\",\n                \"id\": 4,\n                \"options\": {\n                  \"default\": 0\n                }\n              }\n            ]\n          },\n          {\n            \"name\": \"BlobProtoVector\",\n            \"fields\": [\n              {\n                \"rule\": \"repeated\",\n                \"type\": \"BlobProto\",\n                \"name\": \"blobs\",\n                \"id\": 1\n              }\n            ]\n          },\n          {\n            \"name\": \"Datum\",\n            \"fields\": [\n              {\n                \"rule\": \"optional\",\n                \"type\": \"int32\",\n                \"name\": \"channels\",\n                \"id\": 1\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"int32\",\n                \"name\": \"height\",\n                \"id\": 2\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"int32\",\n                \"name\": \"width\",\n                \"id\": 3\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"bytes\",\n                \"name\": \"data\",\n                \"id\": 4\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"int32\",\n                \"name\": \"label\",\n                \"id\": 5\n              },\n              {\n                \"rule\": \"repeated\",\n                \"type\": \"float\",\n                \"name\": \"float_data\",\n                \"id\": 6\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"bool\",\n                \"name\": \"encoded\",\n                \"id\": 7,\n                \"options\": {\n                  \"default\": false\n                }\n              }\n            ]\n          },\n          {\n            \"name\": \"FillerParameter\",\n            \"fields\": [\n              {\n                \"rule\": \"optional\",\n                \"type\": \"string\",\n                \"name\": \"type\",\n                \"id\": 1,\n                \"options\": {\n                  \"default\": \"constant\"\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"float\",\n                \"name\": \"value\",\n                \"id\": 2,\n                \"options\": {\n                  \"default\": 0\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"float\",\n                \"name\": \"min\",\n                \"id\": 3,\n                \"options\": {\n                  \"default\": 0\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"float\",\n                \"name\": \"max\",\n                \"id\": 4,\n                \"options\": {\n                  \"default\": 1\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"float\",\n                \"name\": \"mean\",\n                \"id\": 5,\n                \"options\": {\n                  \"default\": 0\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"float\",\n                \"name\": \"std\",\n                \"id\": 6,\n                \"options\": {\n                  \"default\": 1\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"int32\",\n                \"name\": \"sparse\",\n                \"id\": 7,\n                \"options\": {\n                  \"default\": -1\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"VarianceNorm\",\n                \"name\": \"variance_norm\",\n                \"id\": 8,\n                \"options\": {\n                  \"default\": \"FAN_IN\"\n                }\n              }\n            ],\n            \"enums\": [\n              {\n                \"name\": \"VarianceNorm\",\n                \"values\": [\n                  {\n                    \"name\": \"FAN_IN\",\n                    \"id\": 0\n                  },\n                  {\n                    \"name\": \"FAN_OUT\",\n                    \"id\": 1\n                  },\n                  {\n                    \"name\": \"AVERAGE\",\n                    \"id\": 2\n                  }\n                ]\n              }\n            ]\n          },\n          {\n            \"name\": \"NetParameter\",\n            \"fields\": [\n              {\n                \"rule\": \"optional\",\n                \"type\": \"string\",\n                \"name\": \"name\",\n                \"id\": 1\n              },\n              {\n                \"rule\": \"repeated\",\n                \"type\": \"string\",\n                \"name\": \"input\",\n                \"id\": 3\n              },\n              {\n                \"rule\": \"repeated\",\n                \"type\": \"BlobShape\",\n                \"name\": \"input_shape\",\n                \"id\": 8\n              },\n              {\n                \"rule\": \"repeated\",\n                \"type\": \"int32\",\n                \"name\": \"input_dim\",\n                \"id\": 4\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"bool\",\n                \"name\": \"force_backward\",\n                \"id\": 5,\n                \"options\": {\n                  \"default\": false\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"NetState\",\n                \"name\": \"state\",\n                \"id\": 6\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"bool\",\n                \"name\": \"debug_info\",\n                \"id\": 7,\n                \"options\": {\n                  \"default\": false\n                }\n              },\n              {\n                \"rule\": \"repeated\",\n                \"type\": \"LayerParameter\",\n                \"name\": \"layer\",\n                \"id\": 100\n              },\n              {\n                \"rule\": \"repeated\",\n                \"type\": \"V1LayerParameter\",\n                \"name\": \"layers\",\n                \"id\": 2\n              }\n            ]\n          },\n          {\n            \"name\": \"SolverParameter\",\n            \"fields\": [\n              {\n                \"rule\": \"optional\",\n                \"type\": \"string\",\n                \"name\": \"net\",\n                \"id\": 24\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"NetParameter\",\n                \"name\": \"net_param\",\n                \"id\": 25\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"string\",\n                \"name\": \"train_net\",\n                \"id\": 1\n              },\n              {\n                \"rule\": \"repeated\",\n                \"type\": \"string\",\n                \"name\": \"test_net\",\n                \"id\": 2\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"NetParameter\",\n                \"name\": \"train_net_param\",\n                \"id\": 21\n              },\n              {\n                \"rule\": \"repeated\",\n                \"type\": \"NetParameter\",\n                \"name\": \"test_net_param\",\n                \"id\": 22\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"NetState\",\n                \"name\": \"train_state\",\n                \"id\": 26\n              },\n              {\n                \"rule\": \"repeated\",\n                \"type\": \"NetState\",\n                \"name\": \"test_state\",\n                \"id\": 27\n              },\n              {\n                \"rule\": \"repeated\",\n                \"type\": \"int32\",\n                \"name\": \"test_iter\",\n                \"id\": 3\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"int32\",\n                \"name\": \"test_interval\",\n                \"id\": 4,\n                \"options\": {\n                  \"default\": 0\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"bool\",\n                \"name\": \"test_compute_loss\",\n                \"id\": 19,\n                \"options\": {\n                  \"default\": false\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"bool\",\n                \"name\": \"test_initialization\",\n                \"id\": 32,\n                \"options\": {\n                  \"default\": true\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"float\",\n                \"name\": \"base_lr\",\n                \"id\": 5\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"int32\",\n                \"name\": \"display\",\n                \"id\": 6\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"int32\",\n                \"name\": \"average_loss\",\n                \"id\": 33,\n                \"options\": {\n                  \"default\": 1\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"int32\",\n                \"name\": \"max_iter\",\n                \"id\": 7\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"int32\",\n                \"name\": \"iter_size\",\n                \"id\": 36,\n                \"options\": {\n                  \"default\": 1\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"string\",\n                \"name\": \"lr_policy\",\n                \"id\": 8\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"float\",\n                \"name\": \"gamma\",\n                \"id\": 9\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"float\",\n                \"name\": \"power\",\n                \"id\": 10\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"float\",\n                \"name\": \"momentum\",\n                \"id\": 11\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"float\",\n                \"name\": \"weight_decay\",\n                \"id\": 12\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"string\",\n                \"name\": \"regularization_type\",\n                \"id\": 29,\n                \"options\": {\n                  \"default\": \"L2\"\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"int32\",\n                \"name\": \"stepsize\",\n                \"id\": 13\n              },\n              {\n                \"rule\": \"repeated\",\n                \"type\": \"int32\",\n                \"name\": \"stepvalue\",\n                \"id\": 34\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"float\",\n                \"name\": \"clip_gradients\",\n                \"id\": 35,\n                \"options\": {\n                  \"default\": -1\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"int32\",\n                \"name\": \"snapshot\",\n                \"id\": 14,\n                \"options\": {\n                  \"default\": 0\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"string\",\n                \"name\": \"snapshot_prefix\",\n                \"id\": 15\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"bool\",\n                \"name\": \"snapshot_diff\",\n                \"id\": 16,\n                \"options\": {\n                  \"default\": false\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"SnapshotFormat\",\n                \"name\": \"snapshot_format\",\n                \"id\": 37,\n                \"options\": {\n                  \"default\": \"BINARYPROTO\"\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"SolverMode\",\n                \"name\": \"solver_mode\",\n                \"id\": 17,\n                \"options\": {\n                  \"default\": \"GPU\"\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"int32\",\n                \"name\": \"device_id\",\n                \"id\": 18,\n                \"options\": {\n                  \"default\": 0\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"int64\",\n                \"name\": \"random_seed\",\n                \"id\": 20,\n                \"options\": {\n                  \"default\": -1\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"string\",\n                \"name\": \"type\",\n                \"id\": 40,\n                \"options\": {\n                  \"default\": \"SGD\"\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"float\",\n                \"name\": \"delta\",\n                \"id\": 31,\n                \"options\": {\n                  \"default\": 1e-8\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"float\",\n                \"name\": \"momentum2\",\n                \"id\": 39,\n                \"options\": {\n                  \"default\": 0.999\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"float\",\n                \"name\": \"rms_decay\",\n                \"id\": 38\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"bool\",\n                \"name\": \"debug_info\",\n                \"id\": 23,\n                \"options\": {\n                  \"default\": false\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"bool\",\n                \"name\": \"snapshot_after_train\",\n                \"id\": 28,\n                \"options\": {\n                  \"default\": true\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"SolverType\",\n                \"name\": \"solver_type\",\n                \"id\": 30,\n                \"options\": {\n                  \"default\": \"SGD\"\n                }\n              }\n            ],\n            \"enums\": [\n              {\n                \"name\": \"SnapshotFormat\",\n                \"values\": [\n                  {\n                    \"name\": \"HDF5\",\n                    \"id\": 0\n                  },\n                  {\n                    \"name\": \"BINARYPROTO\",\n                    \"id\": 1\n                  }\n                ]\n              },\n              {\n                \"name\": \"SolverMode\",\n                \"values\": [\n                  {\n                    \"name\": \"CPU\",\n                    \"id\": 0\n                  },\n                  {\n                    \"name\": \"GPU\",\n                    \"id\": 1\n                  }\n                ]\n              },\n              {\n                \"name\": \"SolverType\",\n                \"values\": [\n                  {\n                    \"name\": \"SGD\",\n                    \"id\": 0\n                  },\n                  {\n                    \"name\": \"NESTEROV\",\n                    \"id\": 1\n                  },\n                  {\n                    \"name\": \"ADAGRAD\",\n                    \"id\": 2\n                  },\n                  {\n                    \"name\": \"RMSPROP\",\n                    \"id\": 3\n                  },\n                  {\n                    \"name\": \"ADADELTA\",\n                    \"id\": 4\n                  },\n                  {\n                    \"name\": \"ADAM\",\n                    \"id\": 5\n                  }\n                ]\n              }\n            ]\n          },\n          {\n            \"name\": \"SolverState\",\n            \"fields\": [\n              {\n                \"rule\": \"optional\",\n                \"type\": \"int32\",\n                \"name\": \"iter\",\n                \"id\": 1\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"string\",\n                \"name\": \"learned_net\",\n                \"id\": 2\n              },\n              {\n                \"rule\": \"repeated\",\n                \"type\": \"BlobProto\",\n                \"name\": \"history\",\n                \"id\": 3\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"int32\",\n                \"name\": \"current_step\",\n                \"id\": 4,\n                \"options\": {\n                  \"default\": 0\n                }\n              }\n            ]\n          },\n          {\n            \"name\": \"NetState\",\n            \"fields\": [\n              {\n                \"rule\": \"optional\",\n                \"type\": \"Phase\",\n                \"name\": \"phase\",\n                \"id\": 1,\n                \"options\": {\n                  \"default\": \"TEST\"\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"int32\",\n                \"name\": \"level\",\n                \"id\": 2,\n                \"options\": {\n                  \"default\": 0\n                }\n              },\n              {\n                \"rule\": \"repeated\",\n                \"type\": \"string\",\n                \"name\": \"stage\",\n                \"id\": 3\n              }\n            ]\n          },\n          {\n            \"name\": \"NetStateRule\",\n            \"fields\": [\n              {\n                \"rule\": \"optional\",\n                \"type\": \"Phase\",\n                \"name\": \"phase\",\n                \"id\": 1\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"int32\",\n                \"name\": \"min_level\",\n                \"id\": 2\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"int32\",\n                \"name\": \"max_level\",\n                \"id\": 3\n              },\n              {\n                \"rule\": \"repeated\",\n                \"type\": \"string\",\n                \"name\": \"stage\",\n                \"id\": 4\n              },\n              {\n                \"rule\": \"repeated\",\n                \"type\": \"string\",\n                \"name\": \"not_stage\",\n                \"id\": 5\n              }\n            ]\n          },\n          {\n            \"name\": \"ParamSpec\",\n            \"fields\": [\n              {\n                \"rule\": \"optional\",\n                \"type\": \"string\",\n                \"name\": \"name\",\n                \"id\": 1\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"DimCheckMode\",\n                \"name\": \"share_mode\",\n                \"id\": 2\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"float\",\n                \"name\": \"lr_mult\",\n                \"id\": 3,\n                \"options\": {\n                  \"default\": 1\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"float\",\n                \"name\": \"decay_mult\",\n                \"id\": 4,\n                \"options\": {\n                  \"default\": 1\n                }\n              }\n            ],\n            \"enums\": [\n              {\n                \"name\": \"DimCheckMode\",\n                \"values\": [\n                  {\n                    \"name\": \"STRICT\",\n                    \"id\": 0\n                  },\n                  {\n                    \"name\": \"PERMISSIVE\",\n                    \"id\": 1\n                  }\n                ]\n              }\n            ]\n          },\n          {\n            \"name\": \"LayerParameter\",\n            \"fields\": [\n              {\n                \"rule\": \"optional\",\n                \"type\": \"string\",\n                \"name\": \"name\",\n                \"id\": 1\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"string\",\n                \"name\": \"type\",\n                \"id\": 2\n              },\n              {\n                \"rule\": \"repeated\",\n                \"type\": \"string\",\n                \"name\": \"bottom\",\n                \"id\": 3\n              },\n              {\n                \"rule\": \"repeated\",\n                \"type\": \"string\",\n                \"name\": \"top\",\n                \"id\": 4\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"Phase\",\n                \"name\": \"phase\",\n                \"id\": 10\n              },\n              {\n                \"rule\": \"repeated\",\n                \"type\": \"float\",\n                \"name\": \"loss_weight\",\n                \"id\": 5\n              },\n              {\n                \"rule\": \"repeated\",\n                \"type\": \"ParamSpec\",\n                \"name\": \"param\",\n                \"id\": 6\n              },\n              {\n                \"rule\": \"repeated\",\n                \"type\": \"BlobProto\",\n                \"name\": \"blobs\",\n                \"id\": 7\n              },\n              {\n                \"rule\": \"repeated\",\n                \"type\": \"bool\",\n                \"name\": \"propagate_down\",\n                \"id\": 11\n              },\n              {\n                \"rule\": \"repeated\",\n                \"type\": \"NetStateRule\",\n                \"name\": \"include\",\n                \"id\": 8\n              },\n              {\n                \"rule\": \"repeated\",\n                \"type\": \"NetStateRule\",\n                \"name\": \"exclude\",\n                \"id\": 9\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"TransformationParameter\",\n                \"name\": \"transform_param\",\n                \"id\": 100\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"LossParameter\",\n                \"name\": \"loss_param\",\n                \"id\": 101\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"AccuracyParameter\",\n                \"name\": \"accuracy_param\",\n                \"id\": 102\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"ArgMaxParameter\",\n                \"name\": \"argmax_param\",\n                \"id\": 103\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"BatchNormParameter\",\n                \"name\": \"batch_norm_param\",\n                \"id\": 139\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"BiasParameter\",\n                \"name\": \"bias_param\",\n                \"id\": 141\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"ConcatParameter\",\n                \"name\": \"concat_param\",\n                \"id\": 104\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"ContrastiveLossParameter\",\n                \"name\": \"contrastive_loss_param\",\n                \"id\": 105\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"ConvolutionParameter\",\n                \"name\": \"convolution_param\",\n                \"id\": 106\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"CropParameter\",\n                \"name\": \"crop_param\",\n                \"id\": 144\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"DataParameter\",\n                \"name\": \"data_param\",\n                \"id\": 107\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"DropoutParameter\",\n                \"name\": \"dropout_param\",\n                \"id\": 108\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"DummyDataParameter\",\n                \"name\": \"dummy_data_param\",\n                \"id\": 109\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"EltwiseParameter\",\n                \"name\": \"eltwise_param\",\n                \"id\": 110\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"ELUParameter\",\n                \"name\": \"elu_param\",\n                \"id\": 140\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"EmbedParameter\",\n                \"name\": \"embed_param\",\n                \"id\": 137\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"ExpParameter\",\n                \"name\": \"exp_param\",\n                \"id\": 111\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"FlattenParameter\",\n                \"name\": \"flatten_param\",\n                \"id\": 135\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"HDF5DataParameter\",\n                \"name\": \"hdf5_data_param\",\n                \"id\": 112\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"HDF5OutputParameter\",\n                \"name\": \"hdf5_output_param\",\n                \"id\": 113\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"HingeLossParameter\",\n                \"name\": \"hinge_loss_param\",\n                \"id\": 114\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"ImageDataParameter\",\n                \"name\": \"image_data_param\",\n                \"id\": 115\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"InfogainLossParameter\",\n                \"name\": \"infogain_loss_param\",\n                \"id\": 116\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"InnerProductParameter\",\n                \"name\": \"inner_product_param\",\n                \"id\": 117\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"InputParameter\",\n                \"name\": \"input_param\",\n                \"id\": 143\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"LogParameter\",\n                \"name\": \"log_param\",\n                \"id\": 134\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"LRNParameter\",\n                \"name\": \"lrn_param\",\n                \"id\": 118\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"MemoryDataParameter\",\n                \"name\": \"memory_data_param\",\n                \"id\": 119\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"MVNParameter\",\n                \"name\": \"mvn_param\",\n                \"id\": 120\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"ParameterParameter\",\n                \"name\": \"parameter_param\",\n                \"id\": 145\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"PoolingParameter\",\n                \"name\": \"pooling_param\",\n                \"id\": 121\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"PowerParameter\",\n                \"name\": \"power_param\",\n                \"id\": 122\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"PReLUParameter\",\n                \"name\": \"prelu_param\",\n                \"id\": 131\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"PythonParameter\",\n                \"name\": \"python_param\",\n                \"id\": 130\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"ReductionParameter\",\n                \"name\": \"reduction_param\",\n                \"id\": 136\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"ReLUParameter\",\n                \"name\": \"relu_param\",\n                \"id\": 123\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"ReshapeParameter\",\n                \"name\": \"reshape_param\",\n                \"id\": 133\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"ScaleParameter\",\n                \"name\": \"scale_param\",\n                \"id\": 142\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"SigmoidParameter\",\n                \"name\": \"sigmoid_param\",\n                \"id\": 124\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"SoftmaxParameter\",\n                \"name\": \"softmax_param\",\n                \"id\": 125\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"SPPParameter\",\n                \"name\": \"spp_param\",\n                \"id\": 132\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"SliceParameter\",\n                \"name\": \"slice_param\",\n                \"id\": 126\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"TanHParameter\",\n                \"name\": \"tanh_param\",\n                \"id\": 127\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"ThresholdParameter\",\n                \"name\": \"threshold_param\",\n                \"id\": 128\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"TileParameter\",\n                \"name\": \"tile_param\",\n                \"id\": 138\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"WindowDataParameter\",\n                \"name\": \"window_data_param\",\n                \"id\": 129\n              }\n            ]\n          },\n          {\n            \"name\": \"TransformationParameter\",\n            \"fields\": [\n              {\n                \"rule\": \"optional\",\n                \"type\": \"float\",\n                \"name\": \"scale\",\n                \"id\": 1,\n                \"options\": {\n                  \"default\": 1\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"bool\",\n                \"name\": \"mirror\",\n                \"id\": 2,\n                \"options\": {\n                  \"default\": false\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"uint32\",\n                \"name\": \"crop_size\",\n                \"id\": 3,\n                \"options\": {\n                  \"default\": 0\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"string\",\n                \"name\": \"mean_file\",\n                \"id\": 4\n              },\n              {\n                \"rule\": \"repeated\",\n                \"type\": \"float\",\n                \"name\": \"mean_value\",\n                \"id\": 5\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"bool\",\n                \"name\": \"force_color\",\n                \"id\": 6,\n                \"options\": {\n                  \"default\": false\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"bool\",\n                \"name\": \"force_gray\",\n                \"id\": 7,\n                \"options\": {\n                  \"default\": false\n                }\n              }\n            ]\n          },\n          {\n            \"name\": \"LossParameter\",\n            \"fields\": [\n              {\n                \"rule\": \"optional\",\n                \"type\": \"int32\",\n                \"name\": \"ignore_label\",\n                \"id\": 1\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"NormalizationMode\",\n                \"name\": \"normalization\",\n                \"id\": 3,\n                \"options\": {\n                  \"default\": \"VALID\"\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"bool\",\n                \"name\": \"normalize\",\n                \"id\": 2\n              }\n            ],\n            \"enums\": [\n              {\n                \"name\": \"NormalizationMode\",\n                \"values\": [\n                  {\n                    \"name\": \"FULL\",\n                    \"id\": 0\n                  },\n                  {\n                    \"name\": \"VALID\",\n                    \"id\": 1\n                  },\n                  {\n                    \"name\": \"BATCH_SIZE\",\n                    \"id\": 2\n                  },\n                  {\n                    \"name\": \"NONE\",\n                    \"id\": 3\n                  }\n                ]\n              }\n            ]\n          },\n          {\n            \"name\": \"AccuracyParameter\",\n            \"fields\": [\n              {\n                \"rule\": \"optional\",\n                \"type\": \"uint32\",\n                \"name\": \"top_k\",\n                \"id\": 1,\n                \"options\": {\n                  \"default\": 1\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"int32\",\n                \"name\": \"axis\",\n                \"id\": 2,\n                \"options\": {\n                  \"default\": 1\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"int32\",\n                \"name\": \"ignore_label\",\n                \"id\": 3\n              }\n            ]\n          },\n          {\n            \"name\": \"ArgMaxParameter\",\n            \"fields\": [\n              {\n                \"rule\": \"optional\",\n                \"type\": \"bool\",\n                \"name\": \"out_max_val\",\n                \"id\": 1,\n                \"options\": {\n                  \"default\": false\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"uint32\",\n                \"name\": \"top_k\",\n                \"id\": 2,\n                \"options\": {\n                  \"default\": 1\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"int32\",\n                \"name\": \"axis\",\n                \"id\": 3\n              }\n            ]\n          },\n          {\n            \"name\": \"ConcatParameter\",\n            \"fields\": [\n              {\n                \"rule\": \"optional\",\n                \"type\": \"int32\",\n                \"name\": \"axis\",\n                \"id\": 2,\n                \"options\": {\n                  \"default\": 1\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"uint32\",\n                \"name\": \"concat_dim\",\n                \"id\": 1,\n                \"options\": {\n                  \"default\": 1\n                }\n              }\n            ]\n          },\n          {\n            \"name\": \"BatchNormParameter\",\n            \"fields\": [\n              {\n                \"rule\": \"optional\",\n                \"type\": \"bool\",\n                \"name\": \"use_global_stats\",\n                \"id\": 1\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"float\",\n                \"name\": \"moving_average_fraction\",\n                \"id\": 2,\n                \"options\": {\n                  \"default\": 0.999\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"float\",\n                \"name\": \"eps\",\n                \"id\": 3,\n                \"options\": {\n                  \"default\": 0.00001\n                }\n              }\n            ]\n          },\n          {\n            \"name\": \"BiasParameter\",\n            \"fields\": [\n              {\n                \"rule\": \"optional\",\n                \"type\": \"int32\",\n                \"name\": \"axis\",\n                \"id\": 1,\n                \"options\": {\n                  \"default\": 1\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"int32\",\n                \"name\": \"num_axes\",\n                \"id\": 2,\n                \"options\": {\n                  \"default\": 1\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"FillerParameter\",\n                \"name\": \"filler\",\n                \"id\": 3\n              }\n            ]\n          },\n          {\n            \"name\": \"ContrastiveLossParameter\",\n            \"fields\": [\n              {\n                \"rule\": \"optional\",\n                \"type\": \"float\",\n                \"name\": \"margin\",\n                \"id\": 1,\n                \"options\": {\n                  \"default\": 1\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"bool\",\n                \"name\": \"legacy_version\",\n                \"id\": 2,\n                \"options\": {\n                  \"default\": false\n                }\n              }\n            ]\n          },\n          {\n            \"name\": \"ConvolutionParameter\",\n            \"fields\": [\n              {\n                \"rule\": \"optional\",\n                \"type\": \"uint32\",\n                \"name\": \"num_output\",\n                \"id\": 1\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"bool\",\n                \"name\": \"bias_term\",\n                \"id\": 2,\n                \"options\": {\n                  \"default\": true\n                }\n              },\n              {\n                \"rule\": \"repeated\",\n                \"type\": \"uint32\",\n                \"name\": \"pad\",\n                \"id\": 3\n              },\n              {\n                \"rule\": \"repeated\",\n                \"type\": \"uint32\",\n                \"name\": \"kernel_size\",\n                \"id\": 4\n              },\n              {\n                \"rule\": \"repeated\",\n                \"type\": \"uint32\",\n                \"name\": \"stride\",\n                \"id\": 6\n              },\n              {\n                \"rule\": \"repeated\",\n                \"type\": \"uint32\",\n                \"name\": \"dilation\",\n                \"id\": 18\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"uint32\",\n                \"name\": \"pad_h\",\n                \"id\": 9,\n                \"options\": {\n                  \"default\": 0\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"uint32\",\n                \"name\": \"pad_w\",\n                \"id\": 10,\n                \"options\": {\n                  \"default\": 0\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"uint32\",\n                \"name\": \"kernel_h\",\n                \"id\": 11\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"uint32\",\n                \"name\": \"kernel_w\",\n                \"id\": 12\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"uint32\",\n                \"name\": \"stride_h\",\n                \"id\": 13\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"uint32\",\n                \"name\": \"stride_w\",\n                \"id\": 14\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"uint32\",\n                \"name\": \"group\",\n                \"id\": 5,\n                \"options\": {\n                  \"default\": 1\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"FillerParameter\",\n                \"name\": \"weight_filler\",\n                \"id\": 7\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"FillerParameter\",\n                \"name\": \"bias_filler\",\n                \"id\": 8\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"Engine\",\n                \"name\": \"engine\",\n                \"id\": 15,\n                \"options\": {\n                  \"default\": \"DEFAULT\"\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"int32\",\n                \"name\": \"axis\",\n                \"id\": 16,\n                \"options\": {\n                  \"default\": 1\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"bool\",\n                \"name\": \"force_nd_im2col\",\n                \"id\": 17,\n                \"options\": {\n                  \"default\": false\n                }\n              }\n            ],\n            \"enums\": [\n              {\n                \"name\": \"Engine\",\n                \"values\": [\n                  {\n                    \"name\": \"DEFAULT\",\n                    \"id\": 0\n                  },\n                  {\n                    \"name\": \"CAFFE\",\n                    \"id\": 1\n                  },\n                  {\n                    \"name\": \"CUDNN\",\n                    \"id\": 2\n                  }\n                ]\n              }\n            ]\n          },\n          {\n            \"name\": \"CropParameter\",\n            \"fields\": [\n              {\n                \"rule\": \"optional\",\n                \"type\": \"int32\",\n                \"name\": \"axis\",\n                \"id\": 1,\n                \"options\": {\n                  \"default\": 2\n                }\n              },\n              {\n                \"rule\": \"repeated\",\n                \"type\": \"uint32\",\n                \"name\": \"offset\",\n                \"id\": 2\n              }\n            ]\n          },\n          {\n            \"name\": \"DataParameter\",\n            \"fields\": [\n              {\n                \"rule\": \"optional\",\n                \"type\": \"string\",\n                \"name\": \"source\",\n                \"id\": 1\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"uint32\",\n                \"name\": \"batch_size\",\n                \"id\": 4\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"uint32\",\n                \"name\": \"rand_skip\",\n                \"id\": 7,\n                \"options\": {\n                  \"default\": 0\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"DB\",\n                \"name\": \"backend\",\n                \"id\": 8,\n                \"options\": {\n                  \"default\": \"LEVELDB\"\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"float\",\n                \"name\": \"scale\",\n                \"id\": 2,\n                \"options\": {\n                  \"default\": 1\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"string\",\n                \"name\": \"mean_file\",\n                \"id\": 3\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"uint32\",\n                \"name\": \"crop_size\",\n                \"id\": 5,\n                \"options\": {\n                  \"default\": 0\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"bool\",\n                \"name\": \"mirror\",\n                \"id\": 6,\n                \"options\": {\n                  \"default\": false\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"bool\",\n                \"name\": \"force_encoded_color\",\n                \"id\": 9,\n                \"options\": {\n                  \"default\": false\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"uint32\",\n                \"name\": \"prefetch\",\n                \"id\": 10,\n                \"options\": {\n                  \"default\": 4\n                }\n              }\n            ],\n            \"enums\": [\n              {\n                \"name\": \"DB\",\n                \"values\": [\n                  {\n                    \"name\": \"LEVELDB\",\n                    \"id\": 0\n                  },\n                  {\n                    \"name\": \"LMDB\",\n                    \"id\": 1\n                  }\n                ]\n              }\n            ]\n          },\n          {\n            \"name\": \"DropoutParameter\",\n            \"fields\": [\n              {\n                \"rule\": \"optional\",\n                \"type\": \"float\",\n                \"name\": \"dropout_ratio\",\n                \"id\": 1,\n                \"options\": {\n                  \"default\": 0.5\n                }\n              }\n            ]\n          },\n          {\n            \"name\": \"DummyDataParameter\",\n            \"fields\": [\n              {\n                \"rule\": \"repeated\",\n                \"type\": \"FillerParameter\",\n                \"name\": \"data_filler\",\n                \"id\": 1\n              },\n              {\n                \"rule\": \"repeated\",\n                \"type\": \"BlobShape\",\n                \"name\": \"shape\",\n                \"id\": 6\n              },\n              {\n                \"rule\": \"repeated\",\n                \"type\": \"uint32\",\n                \"name\": \"num\",\n                \"id\": 2\n              },\n              {\n                \"rule\": \"repeated\",\n                \"type\": \"uint32\",\n                \"name\": \"channels\",\n                \"id\": 3\n              },\n              {\n                \"rule\": \"repeated\",\n                \"type\": \"uint32\",\n                \"name\": \"height\",\n                \"id\": 4\n              },\n              {\n                \"rule\": \"repeated\",\n                \"type\": \"uint32\",\n                \"name\": \"width\",\n                \"id\": 5\n              }\n            ]\n          },\n          {\n            \"name\": \"EltwiseParameter\",\n            \"fields\": [\n              {\n                \"rule\": \"optional\",\n                \"type\": \"EltwiseOp\",\n                \"name\": \"operation\",\n                \"id\": 1,\n                \"options\": {\n                  \"default\": \"SUM\"\n                }\n              },\n              {\n                \"rule\": \"repeated\",\n                \"type\": \"float\",\n                \"name\": \"coeff\",\n                \"id\": 2\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"bool\",\n                \"name\": \"stable_prod_grad\",\n                \"id\": 3,\n                \"options\": {\n                  \"default\": true\n                }\n              }\n            ],\n            \"enums\": [\n              {\n                \"name\": \"EltwiseOp\",\n                \"values\": [\n                  {\n                    \"name\": \"PROD\",\n                    \"id\": 0\n                  },\n                  {\n                    \"name\": \"SUM\",\n                    \"id\": 1\n                  },\n                  {\n                    \"name\": \"MAX\",\n                    \"id\": 2\n                  }\n                ]\n              }\n            ]\n          },\n          {\n            \"name\": \"ELUParameter\",\n            \"fields\": [\n              {\n                \"rule\": \"optional\",\n                \"type\": \"float\",\n                \"name\": \"alpha\",\n                \"id\": 1,\n                \"options\": {\n                  \"default\": 1\n                }\n              }\n            ]\n          },\n          {\n            \"name\": \"EmbedParameter\",\n            \"fields\": [\n              {\n                \"rule\": \"optional\",\n                \"type\": \"uint32\",\n                \"name\": \"num_output\",\n                \"id\": 1\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"uint32\",\n                \"name\": \"input_dim\",\n                \"id\": 2\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"bool\",\n                \"name\": \"bias_term\",\n                \"id\": 3,\n                \"options\": {\n                  \"default\": true\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"FillerParameter\",\n                \"name\": \"weight_filler\",\n                \"id\": 4\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"FillerParameter\",\n                \"name\": \"bias_filler\",\n                \"id\": 5\n              }\n            ]\n          },\n          {\n            \"name\": \"ExpParameter\",\n            \"fields\": [\n              {\n                \"rule\": \"optional\",\n                \"type\": \"float\",\n                \"name\": \"base\",\n                \"id\": 1,\n                \"options\": {\n                  \"default\": -1\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"float\",\n                \"name\": \"scale\",\n                \"id\": 2,\n                \"options\": {\n                  \"default\": 1\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"float\",\n                \"name\": \"shift\",\n                \"id\": 3,\n                \"options\": {\n                  \"default\": 0\n                }\n              }\n            ]\n          },\n          {\n            \"name\": \"FlattenParameter\",\n            \"fields\": [\n              {\n                \"rule\": \"optional\",\n                \"type\": \"int32\",\n                \"name\": \"axis\",\n                \"id\": 1,\n                \"options\": {\n                  \"default\": 1\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"int32\",\n                \"name\": \"end_axis\",\n                \"id\": 2,\n                \"options\": {\n                  \"default\": -1\n                }\n              }\n            ]\n          },\n          {\n            \"name\": \"HDF5DataParameter\",\n            \"fields\": [\n              {\n                \"rule\": \"optional\",\n                \"type\": \"string\",\n                \"name\": \"source\",\n                \"id\": 1\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"uint32\",\n                \"name\": \"batch_size\",\n                \"id\": 2\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"bool\",\n                \"name\": \"shuffle\",\n                \"id\": 3,\n                \"options\": {\n                  \"default\": false\n                }\n              }\n            ]\n          },\n          {\n            \"name\": \"HDF5OutputParameter\",\n            \"fields\": [\n              {\n                \"rule\": \"optional\",\n                \"type\": \"string\",\n                \"name\": \"file_name\",\n                \"id\": 1\n              }\n            ]\n          },\n          {\n            \"name\": \"HingeLossParameter\",\n            \"fields\": [\n              {\n                \"rule\": \"optional\",\n                \"type\": \"Norm\",\n                \"name\": \"norm\",\n                \"id\": 1,\n                \"options\": {\n                  \"default\": \"L1\"\n                }\n              }\n            ],\n            \"enums\": [\n              {\n                \"name\": \"Norm\",\n                \"values\": [\n                  {\n                    \"name\": \"L1\",\n                    \"id\": 1\n                  },\n                  {\n                    \"name\": \"L2\",\n                    \"id\": 2\n                  }\n                ]\n              }\n            ]\n          },\n          {\n            \"name\": \"ImageDataParameter\",\n            \"fields\": [\n              {\n                \"rule\": \"optional\",\n                \"type\": \"string\",\n                \"name\": \"source\",\n                \"id\": 1\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"uint32\",\n                \"name\": \"batch_size\",\n                \"id\": 4,\n                \"options\": {\n                  \"default\": 1\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"uint32\",\n                \"name\": \"rand_skip\",\n                \"id\": 7,\n                \"options\": {\n                  \"default\": 0\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"bool\",\n                \"name\": \"shuffle\",\n                \"id\": 8,\n                \"options\": {\n                  \"default\": false\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"uint32\",\n                \"name\": \"new_height\",\n                \"id\": 9,\n                \"options\": {\n                  \"default\": 0\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"uint32\",\n                \"name\": \"new_width\",\n                \"id\": 10,\n                \"options\": {\n                  \"default\": 0\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"bool\",\n                \"name\": \"is_color\",\n                \"id\": 11,\n                \"options\": {\n                  \"default\": true\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"float\",\n                \"name\": \"scale\",\n                \"id\": 2,\n                \"options\": {\n                  \"default\": 1\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"string\",\n                \"name\": \"mean_file\",\n                \"id\": 3\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"uint32\",\n                \"name\": \"crop_size\",\n                \"id\": 5,\n                \"options\": {\n                  \"default\": 0\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"bool\",\n                \"name\": \"mirror\",\n                \"id\": 6,\n                \"options\": {\n                  \"default\": false\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"string\",\n                \"name\": \"root_folder\",\n                \"id\": 12,\n                \"options\": {\n                  \"default\": \"\"\n                }\n              }\n            ]\n          },\n          {\n            \"name\": \"InfogainLossParameter\",\n            \"fields\": [\n              {\n                \"rule\": \"optional\",\n                \"type\": \"string\",\n                \"name\": \"source\",\n                \"id\": 1\n              }\n            ]\n          },\n          {\n            \"name\": \"InnerProductParameter\",\n            \"fields\": [\n              {\n                \"rule\": \"optional\",\n                \"type\": \"uint32\",\n                \"name\": \"num_output\",\n                \"id\": 1\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"bool\",\n                \"name\": \"bias_term\",\n                \"id\": 2,\n                \"options\": {\n                  \"default\": true\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"FillerParameter\",\n                \"name\": \"weight_filler\",\n                \"id\": 3\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"FillerParameter\",\n                \"name\": \"bias_filler\",\n                \"id\": 4\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"int32\",\n                \"name\": \"axis\",\n                \"id\": 5,\n                \"options\": {\n                  \"default\": 1\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"bool\",\n                \"name\": \"transpose\",\n                \"id\": 6,\n                \"options\": {\n                  \"default\": false\n                }\n              }\n            ]\n          },\n          {\n            \"name\": \"InputParameter\",\n            \"fields\": [\n              {\n                \"rule\": \"repeated\",\n                \"type\": \"BlobShape\",\n                \"name\": \"shape\",\n                \"id\": 1\n              }\n            ]\n          },\n          {\n            \"name\": \"LogParameter\",\n            \"fields\": [\n              {\n                \"rule\": \"optional\",\n                \"type\": \"float\",\n                \"name\": \"base\",\n                \"id\": 1,\n                \"options\": {\n                  \"default\": -1\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"float\",\n                \"name\": \"scale\",\n                \"id\": 2,\n                \"options\": {\n                  \"default\": 1\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"float\",\n                \"name\": \"shift\",\n                \"id\": 3,\n                \"options\": {\n                  \"default\": 0\n                }\n              }\n            ]\n          },\n          {\n            \"name\": \"LRNParameter\",\n            \"fields\": [\n              {\n                \"rule\": \"optional\",\n                \"type\": \"uint32\",\n                \"name\": \"local_size\",\n                \"id\": 1,\n                \"options\": {\n                  \"default\": 5\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"float\",\n                \"name\": \"alpha\",\n                \"id\": 2,\n                \"options\": {\n                  \"default\": 1\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"float\",\n                \"name\": \"beta\",\n                \"id\": 3,\n                \"options\": {\n                  \"default\": 0.75\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"NormRegion\",\n                \"name\": \"norm_region\",\n                \"id\": 4,\n                \"options\": {\n                  \"default\": \"ACROSS_CHANNELS\"\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"float\",\n                \"name\": \"k\",\n                \"id\": 5,\n                \"options\": {\n                  \"default\": 1\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"Engine\",\n                \"name\": \"engine\",\n                \"id\": 6,\n                \"options\": {\n                  \"default\": \"DEFAULT\"\n                }\n              }\n            ],\n            \"enums\": [\n              {\n                \"name\": \"NormRegion\",\n                \"values\": [\n                  {\n                    \"name\": \"ACROSS_CHANNELS\",\n                    \"id\": 0\n                  },\n                  {\n                    \"name\": \"WITHIN_CHANNEL\",\n                    \"id\": 1\n                  }\n                ]\n              },\n              {\n                \"name\": \"Engine\",\n                \"values\": [\n                  {\n                    \"name\": \"DEFAULT\",\n                    \"id\": 0\n                  },\n                  {\n                    \"name\": \"CAFFE\",\n                    \"id\": 1\n                  },\n                  {\n                    \"name\": \"CUDNN\",\n                    \"id\": 2\n                  }\n                ]\n              }\n            ]\n          },\n          {\n            \"name\": \"MemoryDataParameter\",\n            \"fields\": [\n              {\n                \"rule\": \"optional\",\n                \"type\": \"uint32\",\n                \"name\": \"batch_size\",\n                \"id\": 1\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"uint32\",\n                \"name\": \"channels\",\n                \"id\": 2\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"uint32\",\n                \"name\": \"height\",\n                \"id\": 3\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"uint32\",\n                \"name\": \"width\",\n                \"id\": 4\n              }\n            ]\n          },\n          {\n            \"name\": \"MVNParameter\",\n            \"fields\": [\n              {\n                \"rule\": \"optional\",\n                \"type\": \"bool\",\n                \"name\": \"normalize_variance\",\n                \"id\": 1,\n                \"options\": {\n                  \"default\": true\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"bool\",\n                \"name\": \"across_channels\",\n                \"id\": 2,\n                \"options\": {\n                  \"default\": false\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"float\",\n                \"name\": \"eps\",\n                \"id\": 3,\n                \"options\": {\n                  \"default\": 1e-9\n                }\n              }\n            ]\n          },\n          {\n            \"name\": \"ParameterParameter\",\n            \"fields\": [\n              {\n                \"rule\": \"optional\",\n                \"type\": \"BlobShape\",\n                \"name\": \"shape\",\n                \"id\": 1\n              }\n            ]\n          },\n          {\n            \"name\": \"PoolingParameter\",\n            \"fields\": [\n              {\n                \"rule\": \"optional\",\n                \"type\": \"PoolMethod\",\n                \"name\": \"pool\",\n                \"id\": 1,\n                \"options\": {\n                  \"default\": \"MAX\"\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"uint32\",\n                \"name\": \"pad\",\n                \"id\": 4,\n                \"options\": {\n                  \"default\": 0\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"uint32\",\n                \"name\": \"pad_h\",\n                \"id\": 9,\n                \"options\": {\n                  \"default\": 0\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"uint32\",\n                \"name\": \"pad_w\",\n                \"id\": 10,\n                \"options\": {\n                  \"default\": 0\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"uint32\",\n                \"name\": \"kernel_size\",\n                \"id\": 2\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"uint32\",\n                \"name\": \"kernel_h\",\n                \"id\": 5\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"uint32\",\n                \"name\": \"kernel_w\",\n                \"id\": 6\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"uint32\",\n                \"name\": \"stride\",\n                \"id\": 3,\n                \"options\": {\n                  \"default\": 1\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"uint32\",\n                \"name\": \"stride_h\",\n                \"id\": 7\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"uint32\",\n                \"name\": \"stride_w\",\n                \"id\": 8\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"Engine\",\n                \"name\": \"engine\",\n                \"id\": 11,\n                \"options\": {\n                  \"default\": \"DEFAULT\"\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"bool\",\n                \"name\": \"global_pooling\",\n                \"id\": 12,\n                \"options\": {\n                  \"default\": false\n                }\n              }\n            ],\n            \"enums\": [\n              {\n                \"name\": \"PoolMethod\",\n                \"values\": [\n                  {\n                    \"name\": \"MAX\",\n                    \"id\": 0\n                  },\n                  {\n                    \"name\": \"AVE\",\n                    \"id\": 1\n                  },\n                  {\n                    \"name\": \"STOCHASTIC\",\n                    \"id\": 2\n                  }\n                ]\n              },\n              {\n                \"name\": \"Engine\",\n                \"values\": [\n                  {\n                    \"name\": \"DEFAULT\",\n                    \"id\": 0\n                  },\n                  {\n                    \"name\": \"CAFFE\",\n                    \"id\": 1\n                  },\n                  {\n                    \"name\": \"CUDNN\",\n                    \"id\": 2\n                  }\n                ]\n              }\n            ]\n          },\n          {\n            \"name\": \"PowerParameter\",\n            \"fields\": [\n              {\n                \"rule\": \"optional\",\n                \"type\": \"float\",\n                \"name\": \"power\",\n                \"id\": 1,\n                \"options\": {\n                  \"default\": 1\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"float\",\n                \"name\": \"scale\",\n                \"id\": 2,\n                \"options\": {\n                  \"default\": 1\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"float\",\n                \"name\": \"shift\",\n                \"id\": 3,\n                \"options\": {\n                  \"default\": 0\n                }\n              }\n            ]\n          },\n          {\n            \"name\": \"PythonParameter\",\n            \"fields\": [\n              {\n                \"rule\": \"optional\",\n                \"type\": \"string\",\n                \"name\": \"module\",\n                \"id\": 1\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"string\",\n                \"name\": \"layer\",\n                \"id\": 2\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"string\",\n                \"name\": \"param_str\",\n                \"id\": 3,\n                \"options\": {\n                  \"default\": \"\"\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"bool\",\n                \"name\": \"share_in_parallel\",\n                \"id\": 4,\n                \"options\": {\n                  \"default\": false\n                }\n              }\n            ]\n          },\n          {\n            \"name\": \"ReductionParameter\",\n            \"fields\": [\n              {\n                \"rule\": \"optional\",\n                \"type\": \"ReductionOp\",\n                \"name\": \"operation\",\n                \"id\": 1,\n                \"options\": {\n                  \"default\": \"SUM\"\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"int32\",\n                \"name\": \"axis\",\n                \"id\": 2,\n                \"options\": {\n                  \"default\": 0\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"float\",\n                \"name\": \"coeff\",\n                \"id\": 3,\n                \"options\": {\n                  \"default\": 1\n                }\n              }\n            ],\n            \"enums\": [\n              {\n                \"name\": \"ReductionOp\",\n                \"values\": [\n                  {\n                    \"name\": \"SUM\",\n                    \"id\": 1\n                  },\n                  {\n                    \"name\": \"ASUM\",\n                    \"id\": 2\n                  },\n                  {\n                    \"name\": \"SUMSQ\",\n                    \"id\": 3\n                  },\n                  {\n                    \"name\": \"MEAN\",\n                    \"id\": 4\n                  }\n                ]\n              }\n            ]\n          },\n          {\n            \"name\": \"ReLUParameter\",\n            \"fields\": [\n              {\n                \"rule\": \"optional\",\n                \"type\": \"float\",\n                \"name\": \"negative_slope\",\n                \"id\": 1,\n                \"options\": {\n                  \"default\": 0\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"Engine\",\n                \"name\": \"engine\",\n                \"id\": 2,\n                \"options\": {\n                  \"default\": \"DEFAULT\"\n                }\n              }\n            ],\n            \"enums\": [\n              {\n                \"name\": \"Engine\",\n                \"values\": [\n                  {\n                    \"name\": \"DEFAULT\",\n                    \"id\": 0\n                  },\n                  {\n                    \"name\": \"CAFFE\",\n                    \"id\": 1\n                  },\n                  {\n                    \"name\": \"CUDNN\",\n                    \"id\": 2\n                  }\n                ]\n              }\n            ]\n          },\n          {\n            \"name\": \"ReshapeParameter\",\n            \"fields\": [\n              {\n                \"rule\": \"optional\",\n                \"type\": \"BlobShape\",\n                \"name\": \"shape\",\n                \"id\": 1\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"int32\",\n                \"name\": \"axis\",\n                \"id\": 2,\n                \"options\": {\n                  \"default\": 0\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"int32\",\n                \"name\": \"num_axes\",\n                \"id\": 3,\n                \"options\": {\n                  \"default\": -1\n                }\n              }\n            ]\n          },\n          {\n            \"name\": \"ScaleParameter\",\n            \"fields\": [\n              {\n                \"rule\": \"optional\",\n                \"type\": \"int32\",\n                \"name\": \"axis\",\n                \"id\": 1,\n                \"options\": {\n                  \"default\": 1\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"int32\",\n                \"name\": \"num_axes\",\n                \"id\": 2,\n                \"options\": {\n                  \"default\": 1\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"FillerParameter\",\n                \"name\": \"filler\",\n                \"id\": 3\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"bool\",\n                \"name\": \"bias_term\",\n                \"id\": 4,\n                \"options\": {\n                  \"default\": false\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"FillerParameter\",\n                \"name\": \"bias_filler\",\n                \"id\": 5\n              }\n            ]\n          },\n          {\n            \"name\": \"SigmoidParameter\",\n            \"fields\": [\n              {\n                \"rule\": \"optional\",\n                \"type\": \"Engine\",\n                \"name\": \"engine\",\n                \"id\": 1,\n                \"options\": {\n                  \"default\": \"DEFAULT\"\n                }\n              }\n            ],\n            \"enums\": [\n              {\n                \"name\": \"Engine\",\n                \"values\": [\n                  {\n                    \"name\": \"DEFAULT\",\n                    \"id\": 0\n                  },\n                  {\n                    \"name\": \"CAFFE\",\n                    \"id\": 1\n                  },\n                  {\n                    \"name\": \"CUDNN\",\n                    \"id\": 2\n                  }\n                ]\n              }\n            ]\n          },\n          {\n            \"name\": \"SliceParameter\",\n            \"fields\": [\n              {\n                \"rule\": \"optional\",\n                \"type\": \"int32\",\n                \"name\": \"axis\",\n                \"id\": 3,\n                \"options\": {\n                  \"default\": 1\n                }\n              },\n              {\n                \"rule\": \"repeated\",\n                \"type\": \"uint32\",\n                \"name\": \"slice_point\",\n                \"id\": 2\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"uint32\",\n                \"name\": \"slice_dim\",\n                \"id\": 1,\n                \"options\": {\n                  \"default\": 1\n                }\n              }\n            ]\n          },\n          {\n            \"name\": \"SoftmaxParameter\",\n            \"fields\": [\n              {\n                \"rule\": \"optional\",\n                \"type\": \"Engine\",\n                \"name\": \"engine\",\n                \"id\": 1,\n                \"options\": {\n                  \"default\": \"DEFAULT\"\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"int32\",\n                \"name\": \"axis\",\n                \"id\": 2,\n                \"options\": {\n                  \"default\": 1\n                }\n              }\n            ],\n            \"enums\": [\n              {\n                \"name\": \"Engine\",\n                \"values\": [\n                  {\n                    \"name\": \"DEFAULT\",\n                    \"id\": 0\n                  },\n                  {\n                    \"name\": \"CAFFE\",\n                    \"id\": 1\n                  },\n                  {\n                    \"name\": \"CUDNN\",\n                    \"id\": 2\n                  }\n                ]\n              }\n            ]\n          },\n          {\n            \"name\": \"TanHParameter\",\n            \"fields\": [\n              {\n                \"rule\": \"optional\",\n                \"type\": \"Engine\",\n                \"name\": \"engine\",\n                \"id\": 1,\n                \"options\": {\n                  \"default\": \"DEFAULT\"\n                }\n              }\n            ],\n            \"enums\": [\n              {\n                \"name\": \"Engine\",\n                \"values\": [\n                  {\n                    \"name\": \"DEFAULT\",\n                    \"id\": 0\n                  },\n                  {\n                    \"name\": \"CAFFE\",\n                    \"id\": 1\n                  },\n                  {\n                    \"name\": \"CUDNN\",\n                    \"id\": 2\n                  }\n                ]\n              }\n            ]\n          },\n          {\n            \"name\": \"TileParameter\",\n            \"fields\": [\n              {\n                \"rule\": \"optional\",\n                \"type\": \"int32\",\n                \"name\": \"axis\",\n                \"id\": 1,\n                \"options\": {\n                  \"default\": 1\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"int32\",\n                \"name\": \"tiles\",\n                \"id\": 2\n              }\n            ]\n          },\n          {\n            \"name\": \"ThresholdParameter\",\n            \"fields\": [\n              {\n                \"rule\": \"optional\",\n                \"type\": \"float\",\n                \"name\": \"threshold\",\n                \"id\": 1,\n                \"options\": {\n                  \"default\": 0\n                }\n              }\n            ]\n          },\n          {\n            \"name\": \"WindowDataParameter\",\n            \"fields\": [\n              {\n                \"rule\": \"optional\",\n                \"type\": \"string\",\n                \"name\": \"source\",\n                \"id\": 1\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"float\",\n                \"name\": \"scale\",\n                \"id\": 2,\n                \"options\": {\n                  \"default\": 1\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"string\",\n                \"name\": \"mean_file\",\n                \"id\": 3\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"uint32\",\n                \"name\": \"batch_size\",\n                \"id\": 4\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"uint32\",\n                \"name\": \"crop_size\",\n                \"id\": 5,\n                \"options\": {\n                  \"default\": 0\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"bool\",\n                \"name\": \"mirror\",\n                \"id\": 6,\n                \"options\": {\n                  \"default\": false\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"float\",\n                \"name\": \"fg_threshold\",\n                \"id\": 7,\n                \"options\": {\n                  \"default\": 0.5\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"float\",\n                \"name\": \"bg_threshold\",\n                \"id\": 8,\n                \"options\": {\n                  \"default\": 0.5\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"float\",\n                \"name\": \"fg_fraction\",\n                \"id\": 9,\n                \"options\": {\n                  \"default\": 0.25\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"uint32\",\n                \"name\": \"context_pad\",\n                \"id\": 10,\n                \"options\": {\n                  \"default\": 0\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"string\",\n                \"name\": \"crop_mode\",\n                \"id\": 11,\n                \"options\": {\n                  \"default\": \"warp\"\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"bool\",\n                \"name\": \"cache_images\",\n                \"id\": 12,\n                \"options\": {\n                  \"default\": false\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"string\",\n                \"name\": \"root_folder\",\n                \"id\": 13,\n                \"options\": {\n                  \"default\": \"\"\n                }\n              }\n            ]\n          },\n          {\n            \"name\": \"SPPParameter\",\n            \"fields\": [\n              {\n                \"rule\": \"optional\",\n                \"type\": \"uint32\",\n                \"name\": \"pyramid_height\",\n                \"id\": 1\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"PoolMethod\",\n                \"name\": \"pool\",\n                \"id\": 2,\n                \"options\": {\n                  \"default\": \"MAX\"\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"Engine\",\n                \"name\": \"engine\",\n                \"id\": 6,\n                \"options\": {\n                  \"default\": \"DEFAULT\"\n                }\n              }\n            ],\n            \"enums\": [\n              {\n                \"name\": \"PoolMethod\",\n                \"values\": [\n                  {\n                    \"name\": \"MAX\",\n                    \"id\": 0\n                  },\n                  {\n                    \"name\": \"AVE\",\n                    \"id\": 1\n                  },\n                  {\n                    \"name\": \"STOCHASTIC\",\n                    \"id\": 2\n                  }\n                ]\n              },\n              {\n                \"name\": \"Engine\",\n                \"values\": [\n                  {\n                    \"name\": \"DEFAULT\",\n                    \"id\": 0\n                  },\n                  {\n                    \"name\": \"CAFFE\",\n                    \"id\": 1\n                  },\n                  {\n                    \"name\": \"CUDNN\",\n                    \"id\": 2\n                  }\n                ]\n              }\n            ]\n          },\n          {\n            \"name\": \"V1LayerParameter\",\n            \"fields\": [\n              {\n                \"rule\": \"repeated\",\n                \"type\": \"string\",\n                \"name\": \"bottom\",\n                \"id\": 2\n              },\n              {\n                \"rule\": \"repeated\",\n                \"type\": \"string\",\n                \"name\": \"top\",\n                \"id\": 3\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"string\",\n                \"name\": \"name\",\n                \"id\": 4\n              },\n              {\n                \"rule\": \"repeated\",\n                \"type\": \"NetStateRule\",\n                \"name\": \"include\",\n                \"id\": 32\n              },\n              {\n                \"rule\": \"repeated\",\n                \"type\": \"NetStateRule\",\n                \"name\": \"exclude\",\n                \"id\": 33\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"LayerType\",\n                \"name\": \"type\",\n                \"id\": 5\n              },\n              {\n                \"rule\": \"repeated\",\n                \"type\": \"BlobProto\",\n                \"name\": \"blobs\",\n                \"id\": 6\n              },\n              {\n                \"rule\": \"repeated\",\n                \"type\": \"string\",\n                \"name\": \"param\",\n                \"id\": 1001\n              },\n              {\n                \"rule\": \"repeated\",\n                \"type\": \"DimCheckMode\",\n                \"name\": \"blob_share_mode\",\n                \"id\": 1002\n              },\n              {\n                \"rule\": \"repeated\",\n                \"type\": \"float\",\n                \"name\": \"blobs_lr\",\n                \"id\": 7\n              },\n              {\n                \"rule\": \"repeated\",\n                \"type\": \"float\",\n                \"name\": \"weight_decay\",\n                \"id\": 8\n              },\n              {\n                \"rule\": \"repeated\",\n                \"type\": \"float\",\n                \"name\": \"loss_weight\",\n                \"id\": 35\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"AccuracyParameter\",\n                \"name\": \"accuracy_param\",\n                \"id\": 27\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"ArgMaxParameter\",\n                \"name\": \"argmax_param\",\n                \"id\": 23\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"ConcatParameter\",\n                \"name\": \"concat_param\",\n                \"id\": 9\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"ContrastiveLossParameter\",\n                \"name\": \"contrastive_loss_param\",\n                \"id\": 40\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"ConvolutionParameter\",\n                \"name\": \"convolution_param\",\n                \"id\": 10\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"DataParameter\",\n                \"name\": \"data_param\",\n                \"id\": 11\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"DropoutParameter\",\n                \"name\": \"dropout_param\",\n                \"id\": 12\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"DummyDataParameter\",\n                \"name\": \"dummy_data_param\",\n                \"id\": 26\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"EltwiseParameter\",\n                \"name\": \"eltwise_param\",\n                \"id\": 24\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"ExpParameter\",\n                \"name\": \"exp_param\",\n                \"id\": 41\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"HDF5DataParameter\",\n                \"name\": \"hdf5_data_param\",\n                \"id\": 13\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"HDF5OutputParameter\",\n                \"name\": \"hdf5_output_param\",\n                \"id\": 14\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"HingeLossParameter\",\n                \"name\": \"hinge_loss_param\",\n                \"id\": 29\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"ImageDataParameter\",\n                \"name\": \"image_data_param\",\n                \"id\": 15\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"InfogainLossParameter\",\n                \"name\": \"infogain_loss_param\",\n                \"id\": 16\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"InnerProductParameter\",\n                \"name\": \"inner_product_param\",\n                \"id\": 17\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"LRNParameter\",\n                \"name\": \"lrn_param\",\n                \"id\": 18\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"MemoryDataParameter\",\n                \"name\": \"memory_data_param\",\n                \"id\": 22\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"MVNParameter\",\n                \"name\": \"mvn_param\",\n                \"id\": 34\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"PoolingParameter\",\n                \"name\": \"pooling_param\",\n                \"id\": 19\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"PowerParameter\",\n                \"name\": \"power_param\",\n                \"id\": 21\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"ReLUParameter\",\n                \"name\": \"relu_param\",\n                \"id\": 30\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"SigmoidParameter\",\n                \"name\": \"sigmoid_param\",\n                \"id\": 38\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"SoftmaxParameter\",\n                \"name\": \"softmax_param\",\n                \"id\": 39\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"SliceParameter\",\n                \"name\": \"slice_param\",\n                \"id\": 31\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"TanHParameter\",\n                \"name\": \"tanh_param\",\n                \"id\": 37\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"ThresholdParameter\",\n                \"name\": \"threshold_param\",\n                \"id\": 25\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"WindowDataParameter\",\n                \"name\": \"window_data_param\",\n                \"id\": 20\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"TransformationParameter\",\n                \"name\": \"transform_param\",\n                \"id\": 36\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"LossParameter\",\n                \"name\": \"loss_param\",\n                \"id\": 42\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"V0LayerParameter\",\n                \"name\": \"layer\",\n                \"id\": 1\n              }\n            ],\n            \"enums\": [\n              {\n                \"name\": \"LayerType\",\n                \"values\": [\n                  {\n                    \"name\": \"NONE\",\n                    \"id\": 0\n                  },\n                  {\n                    \"name\": \"ABSVAL\",\n                    \"id\": 35\n                  },\n                  {\n                    \"name\": \"ACCURACY\",\n                    \"id\": 1\n                  },\n                  {\n                    \"name\": \"ARGMAX\",\n                    \"id\": 30\n                  },\n                  {\n                    \"name\": \"BNLL\",\n                    \"id\": 2\n                  },\n                  {\n                    \"name\": \"CONCAT\",\n                    \"id\": 3\n                  },\n                  {\n                    \"name\": \"CONTRASTIVE_LOSS\",\n                    \"id\": 37\n                  },\n                  {\n                    \"name\": \"CONVOLUTION\",\n                    \"id\": 4\n                  },\n                  {\n                    \"name\": \"DATA\",\n                    \"id\": 5\n                  },\n                  {\n                    \"name\": \"DECONVOLUTION\",\n                    \"id\": 39\n                  },\n                  {\n                    \"name\": \"DROPOUT\",\n                    \"id\": 6\n                  },\n                  {\n                    \"name\": \"DUMMY_DATA\",\n                    \"id\": 32\n                  },\n                  {\n                    \"name\": \"EUCLIDEAN_LOSS\",\n                    \"id\": 7\n                  },\n                  {\n                    \"name\": \"ELTWISE\",\n                    \"id\": 25\n                  },\n                  {\n                    \"name\": \"EXP\",\n                    \"id\": 38\n                  },\n                  {\n                    \"name\": \"FLATTEN\",\n                    \"id\": 8\n                  },\n                  {\n                    \"name\": \"HDF5_DATA\",\n                    \"id\": 9\n                  },\n                  {\n                    \"name\": \"HDF5_OUTPUT\",\n                    \"id\": 10\n                  },\n                  {\n                    \"name\": \"HINGE_LOSS\",\n                    \"id\": 28\n                  },\n                  {\n                    \"name\": \"IM2COL\",\n                    \"id\": 11\n                  },\n                  {\n                    \"name\": \"IMAGE_DATA\",\n                    \"id\": 12\n                  },\n                  {\n                    \"name\": \"INFOGAIN_LOSS\",\n                    \"id\": 13\n                  },\n                  {\n                    \"name\": \"INNER_PRODUCT\",\n                    \"id\": 14\n                  },\n                  {\n                    \"name\": \"LRN\",\n                    \"id\": 15\n                  },\n                  {\n                    \"name\": \"MEMORY_DATA\",\n                    \"id\": 29\n                  },\n                  {\n                    \"name\": \"MULTINOMIAL_LOGISTIC_LOSS\",\n                    \"id\": 16\n                  },\n                  {\n                    \"name\": \"MVN\",\n                    \"id\": 34\n                  },\n                  {\n                    \"name\": \"POOLING\",\n                    \"id\": 17\n                  },\n                  {\n                    \"name\": \"POWER\",\n                    \"id\": 26\n                  },\n                  {\n                    \"name\": \"RELU\",\n                    \"id\": 18\n                  },\n                  {\n                    \"name\": \"SIGMOID\",\n                    \"id\": 19\n                  },\n                  {\n                    \"name\": \"SIGMOID_CROSS_ENTROPY_LOSS\",\n                    \"id\": 27\n                  },\n                  {\n                    \"name\": \"SILENCE\",\n                    \"id\": 36\n                  },\n                  {\n                    \"name\": \"SOFTMAX\",\n                    \"id\": 20\n                  },\n                  {\n                    \"name\": \"SOFTMAX_LOSS\",\n                    \"id\": 21\n                  },\n                  {\n                    \"name\": \"SPLIT\",\n                    \"id\": 22\n                  },\n                  {\n                    \"name\": \"SLICE\",\n                    \"id\": 33\n                  },\n                  {\n                    \"name\": \"TANH\",\n                    \"id\": 23\n                  },\n                  {\n                    \"name\": \"WINDOW_DATA\",\n                    \"id\": 24\n                  },\n                  {\n                    \"name\": \"THRESHOLD\",\n                    \"id\": 31\n                  }\n                ]\n              },\n              {\n                \"name\": \"DimCheckMode\",\n                \"values\": [\n                  {\n                    \"name\": \"STRICT\",\n                    \"id\": 0\n                  },\n                  {\n                    \"name\": \"PERMISSIVE\",\n                    \"id\": 1\n                  }\n                ]\n              }\n            ]\n          },\n          {\n            \"name\": \"V0LayerParameter\",\n            \"fields\": [\n              {\n                \"rule\": \"optional\",\n                \"type\": \"string\",\n                \"name\": \"name\",\n                \"id\": 1\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"string\",\n                \"name\": \"type\",\n                \"id\": 2\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"uint32\",\n                \"name\": \"num_output\",\n                \"id\": 3\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"bool\",\n                \"name\": \"biasterm\",\n                \"id\": 4,\n                \"options\": {\n                  \"default\": true\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"FillerParameter\",\n                \"name\": \"weight_filler\",\n                \"id\": 5\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"FillerParameter\",\n                \"name\": \"bias_filler\",\n                \"id\": 6\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"uint32\",\n                \"name\": \"pad\",\n                \"id\": 7,\n                \"options\": {\n                  \"default\": 0\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"uint32\",\n                \"name\": \"kernelsize\",\n                \"id\": 8\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"uint32\",\n                \"name\": \"group\",\n                \"id\": 9,\n                \"options\": {\n                  \"default\": 1\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"uint32\",\n                \"name\": \"stride\",\n                \"id\": 10,\n                \"options\": {\n                  \"default\": 1\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"PoolMethod\",\n                \"name\": \"pool\",\n                \"id\": 11,\n                \"options\": {\n                  \"default\": \"MAX\"\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"float\",\n                \"name\": \"dropout_ratio\",\n                \"id\": 12,\n                \"options\": {\n                  \"default\": 0.5\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"uint32\",\n                \"name\": \"local_size\",\n                \"id\": 13,\n                \"options\": {\n                  \"default\": 5\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"float\",\n                \"name\": \"alpha\",\n                \"id\": 14,\n                \"options\": {\n                  \"default\": 1\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"float\",\n                \"name\": \"beta\",\n                \"id\": 15,\n                \"options\": {\n                  \"default\": 0.75\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"float\",\n                \"name\": \"k\",\n                \"id\": 22,\n                \"options\": {\n                  \"default\": 1\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"string\",\n                \"name\": \"source\",\n                \"id\": 16\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"float\",\n                \"name\": \"scale\",\n                \"id\": 17,\n                \"options\": {\n                  \"default\": 1\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"string\",\n                \"name\": \"meanfile\",\n                \"id\": 18\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"uint32\",\n                \"name\": \"batchsize\",\n                \"id\": 19\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"uint32\",\n                \"name\": \"cropsize\",\n                \"id\": 20,\n                \"options\": {\n                  \"default\": 0\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"bool\",\n                \"name\": \"mirror\",\n                \"id\": 21,\n                \"options\": {\n                  \"default\": false\n                }\n              },\n              {\n                \"rule\": \"repeated\",\n                \"type\": \"BlobProto\",\n                \"name\": \"blobs\",\n                \"id\": 50\n              },\n              {\n                \"rule\": \"repeated\",\n                \"type\": \"float\",\n                \"name\": \"blobs_lr\",\n                \"id\": 51\n              },\n              {\n                \"rule\": \"repeated\",\n                \"type\": \"float\",\n                \"name\": \"weight_decay\",\n                \"id\": 52\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"uint32\",\n                \"name\": \"rand_skip\",\n                \"id\": 53,\n                \"options\": {\n                  \"default\": 0\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"float\",\n                \"name\": \"det_fg_threshold\",\n                \"id\": 54,\n                \"options\": {\n                  \"default\": 0.5\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"float\",\n                \"name\": \"det_bg_threshold\",\n                \"id\": 55,\n                \"options\": {\n                  \"default\": 0.5\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"float\",\n                \"name\": \"det_fg_fraction\",\n                \"id\": 56,\n                \"options\": {\n                  \"default\": 0.25\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"uint32\",\n                \"name\": \"det_context_pad\",\n                \"id\": 58,\n                \"options\": {\n                  \"default\": 0\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"string\",\n                \"name\": \"det_crop_mode\",\n                \"id\": 59,\n                \"options\": {\n                  \"default\": \"warp\"\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"int32\",\n                \"name\": \"new_num\",\n                \"id\": 60,\n                \"options\": {\n                  \"default\": 0\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"int32\",\n                \"name\": \"new_channels\",\n                \"id\": 61,\n                \"options\": {\n                  \"default\": 0\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"int32\",\n                \"name\": \"new_height\",\n                \"id\": 62,\n                \"options\": {\n                  \"default\": 0\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"int32\",\n                \"name\": \"new_width\",\n                \"id\": 63,\n                \"options\": {\n                  \"default\": 0\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"bool\",\n                \"name\": \"shuffle_images\",\n                \"id\": 64,\n                \"options\": {\n                  \"default\": false\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"uint32\",\n                \"name\": \"concat_dim\",\n                \"id\": 65,\n                \"options\": {\n                  \"default\": 1\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"HDF5OutputParameter\",\n                \"name\": \"hdf5_output_param\",\n                \"id\": 1001\n              }\n            ],\n            \"enums\": [\n              {\n                \"name\": \"PoolMethod\",\n                \"values\": [\n                  {\n                    \"name\": \"MAX\",\n                    \"id\": 0\n                  },\n                  {\n                    \"name\": \"AVE\",\n                    \"id\": 1\n                  },\n                  {\n                    \"name\": \"STOCHASTIC\",\n                    \"id\": 2\n                  }\n                ]\n              }\n            ]\n          },\n          {\n            \"name\": \"PReLUParameter\",\n            \"fields\": [\n              {\n                \"rule\": \"optional\",\n                \"type\": \"FillerParameter\",\n                \"name\": \"filler\",\n                \"id\": 1\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"bool\",\n                \"name\": \"channel_shared\",\n                \"id\": 2,\n                \"options\": {\n                  \"default\": false\n                }\n              }\n            ]\n          }\n        ],\n        \"enums\": [\n          {\n            \"name\": \"Phase\",\n            \"values\": [\n              {\n                \"name\": \"TRAIN\",\n                \"id\": 0\n              },\n              {\n                \"name\": \"TEST\",\n                \"id\": 1\n              }\n            ]\n          }\n        ]\n      }).build();\n    \n      return this.parseProto(raw, _.caffe);\n    }\n\n    abstract parseProto(data: ArrayBuffer, caffe: any);\n  }\n}\n","/// <reference path=\"./BinaryprotoParser.ts\" />\n/// <reference path=\"../Net/_module.ts\" />\n\nnamespace Parser {\n\n  export class BlobProtoParser extends BinaryprotoParser {\n\n    parseProto(rawData: ArrayBuffer, protoParser: any) {\n      // Decode the protobuf data\n      var blob = protoParser.BlobProto.decode(rawData);\n\n      var sx = blob.width, sy = blob.height, depth = blob.channels;\n      var data = blob.data;\n\n      // Generate a new Vol from the blob data\n      var vol = new Net.Vol(sx, sy, depth, 0.0);\n      \n      for (let d = 0; d < depth; d++) {\n        for (let y = 0; y < sy; y++) {\n          for (let x = 0; x < sx; x++) {\n            var ix = ((sy * d) + y) * sx + x;\n            vol.set(x, y, d, data[ix]);\n          }\n        }\n      }\n      return vol;\n    }\n  }\n}","/// <reference path=\"./TextParser.ts\" />\n\nnamespace Parser {\n\n  export class PrototxtParser extends TextParser {\n\n    parseString(raw: string){\n      return this.parsePrototxt(raw);\n    }\n\n    parsePrototxt(raw: string, level: number = 0) {\n      var json = {};\n      var match;\n\n      if (level == 0) {\n        var regexVal = /(?:^|\\n)(\\w+):\\s\"*([\\w/.]+)\"*/gi;\n        var regexObj = /(?:^|\\n)(\\w+)\\s\\{([\\S\\s]*?)\\n\\}/gi;\n      }\n      else {\n        let indent = '(?:^|\\\\n)\\\\s{' + level + '}';\n        let key = '(\\\\w+)';\n        var regexVal = new RegExp(indent + key + '\\\\s*:\\\\s*\"*([\\\\w/.]+)\"*', \"gi\");\n        var regexObj = new RegExp(indent + key + '\\\\s*\\\\{\\\\s*\\\\n([\\\\s\\\\S]*?)\\\\n\\\\s{' + level + '}\\\\}', \"gi\");\n      }\n\n      while (match = regexVal.exec(raw)) {\n        let key = match[1];\n        let value = match[2];\n        if (json[key] !== undefined) {\n          if (Array.isArray(json[key])) {\n            json[key].push(value);\n          }\n          else {\n            json[key] = [json[key]];\n            json[key].push(value);\n          }\n        }\n        else {\n          json[match[1]] = value;\n        }\n      }\n\n      while (match = regexObj.exec(raw)) {\n        let key = match[1];\n        let value = this.parsePrototxt(match[2], level + 2);\n\n        if (json[key] !== undefined) {\n          if (Array.isArray(json[key])) {\n            json[key].push(value);\n          }\n          else {\n            json[key] = [json[key]];\n            json[key].push(value);\n          }\n        }\n        else {\n          json[key] = value;\n        }\n      }\n\n      return json;\n    }\n  }\n}\n","/// <reference path=\"./Layers/_module.ts\" />\n/// <reference path=\"../Parser/_module.ts\" />\n\n// import * as d3 from 'd3';\n\nnamespace Net {\n\n  // declare variables\n  declare var d3: any;\n  declare var Promise: any;\n\n  interface IEdge {\n    from: string;\n    to: string;\n  }\n\n  export class CaffeModel extends Model {\n\n    public name: string;\n\n    constructor(private modelPath?: string, private weightPath?: string) {\n      super();\n    }\n\n    load() {\n      return this.fetch(this.modelPath)\n        .then((model) => this.create(model))\n        .then((model) => this.loadWeights());\n    }\n\n    fromText(def: string) {\n      var protoParser = new Parser.PrototxtParser();\n      this.create(protoParser.parseString(def))\n      return this;\n    }\n\n    fetch(url: string) {\n      var protoParser = new Parser.PrototxtParser();\n      return protoParser.parse(url);\n    }\n\n    create(model: any) {\n      this.name = model.name;\n\n      this.createLayers(model, model.layer || model.layers, model.input === 'data');\n      this.createEdges();\n    }\n\n    caffeLayerToJs(layerOpt: any): ILayer {\n\n      var layer: ILayer;\n      var opt: any = { name: layerOpt.name, input: layerOpt.bottom, output: layerOpt.top };\n\n      // Get predecessors of the current layers\n      if (layerOpt.bottom !== undefined){\n        if (!Array.isArray(layerOpt.bottom)) {\n          opt.pred = [this.layers.get(layerOpt.bottom)];\n        }\n        else {\n          opt.pred = layerOpt.bottom.map((d) => this.layers.get(d));\n        }\n      }\n\n      switch (layerOpt.type.toLowerCase()) {\n\n        case 'input':\n          var p = layerOpt.input_param || {};\n          opt.out_depth = +p.shape.dim[1];\n          opt.out_sx = +p.shape.dim[2];\n          opt.out_sy = +p.shape.dim[3];\n          layer = new Layers.InputLayer(opt);\n          break;\n\n        case 'conv':\n        case 'convolution':\n          var p = layerOpt.param || {};\n          var cp = layerOpt.convolution_param || {};\n          opt.sx = cp.kernel_size !== undefined ? +cp.kernel_size : undefined;\n          opt.filters = cp.num_output !== undefined ? +cp.num_output : undefined;\n          opt.pad = cp.pad !== undefined ? +cp.pad : undefined;\n          opt.stride = cp.stride !== undefined ? +cp.stride : undefined;\n          opt.l1_decay_mul = p && p.length && p[0].decay_mult !== undefined ? +p[0].decay_mult : 0.0;\n          opt.l2_decay_mul = p && p.length && p[1].decay_mult !== undefined ? +p[1].decay_mult : 1.0;\n          opt.group = cp.group !== undefined ? +cp.group : 1;\n          layer = new Layers.ConvLayer(opt);\n          break;\n\n        case 'lrn':\n          var p = layerOpt.lrn_param || {};\n          opt.k = p.k !== undefined ? +p.k : 1;\n          opt.n = p.local_size !== undefined ? +p.local_size : undefined;\n          opt.alpha = p.alpha !== undefined ? +p.alpha : undefined;\n          opt.beta = p.beta !== undefined ? +p.beta : undefined;\n          layer = new Layers.LocalResponseNormalizationLayer(opt);\n          break;\n\n        case 'dropout':\n          var dp = layerOpt.dropout_param || {};\n          opt.drop_prob = dp.dropout_ratio !== undefined ? +dp.dropout_ratio : undefined;\n          layer = new Layers.DropoutLayer(opt);\n          break;\n\n        case 'concat':\n          var cp = layerOpt.concat_param || {};\n          opt.axis = cp.axis !== undefined ? +cp.axis : undefined;\n          layer = new Layers.ConcatLayer(opt);\n          break;\n\n        case 'pool':\n        case 'pooling':\n          var pp = layerOpt.pooling_param || {};\n          opt.pool = pp.pool !== undefined ? pp.pool : undefined;\n          opt.sx = pp.kernel_size !== undefined ? +pp.kernel_size : undefined;\n          opt.pad = pp.pad !== undefined ? +pp.pad : undefined;\n          opt.stride = pp.stride !== undefined ? +pp.stride : undefined;\n          opt.global_pooling = pp.global_pooling !== undefined &&  pp.global_pooling !== 'false' ? true : false;\n          layer = new Layers.PoolLayer(opt);\n          break;\n\n        case 'inner_product':\n        case 'innerproduct':\n          var pp = layerOpt.inner_product_param || {};\n          var p = layerOpt.param || {};\n          opt.num_neurons = pp.num_output !== undefined ? +pp.num_output : undefined;\n          opt.l1_decay_mul = p && p.length && p[0].decay_mult !== undefined ? +p[0].decay_mult : 0.0;\n          opt.l2_decay_mul = p && p.length && p[1].decay_mult !== undefined ? +p[1].decay_mult : 1.0;\n          layer = new Layers.FullyConnectedLayer(opt);\n          break;\n\n        case 'softmax': layer = new Layers.SoftmaxLayer(opt); break;\n        case 'relu': layer = new Layers.ReluLayer(opt); break;\n        case 'sigmoid': layer = new Layers.SigmoidLayer(opt); break;\n        case 'tanh': layer = new Layers.TanhLayer(opt); break;\n\n        default:\n          console.error('Cannot parse layer ' + layerOpt.type, layerOpt);\n          return;\n      }\n\n      this.layers.set(layer.name, layer);\n    }\n\n    createLayers(model: any, layers: any, makeInput: boolean = false) {\n      this.layers = d3.map();\n\n      // Create Input layer manually\n      if (makeInput) {\n        this.layers.set('data', new Layers.InputLayer({\n            name: 'data',\n            in_depth: +model.input_dim[1],\n            in_sy: +model.input_dim[2],\n            in_sx: +model.input_dim[3],\n          })\n        );\n      }\n\n      // Create all other layers\n      layers.forEach((d) => this.caffeLayerToJs(d));\n    }\n\n    createEdges() {\n      this.edges = [];\n\n      let edgeSet = d3.set();\n      let getEdgeId = (a, b) => a + \":#:\" + b;\n\n      this.layers.values()\n        .filter((d: any) => d.input !== undefined && d.input !== d.output)\n        .forEach((d: any) => {\n          if (!Array.isArray(d.input)) {\n            this.edges.push({ from: d.input, to: d.output });\n          }\n          else {\n            d.input.forEach((layerName: string) => {\n              if (!edgeSet.has(getEdgeId(layerName, d.output))) {\n                this.edges.push({ from: layerName, to: d.output });\n                edgeSet.add(getEdgeId(layerName, d.output));\n              }\n            });\n          }\n        });\n\n      // Parse self-loops in Caffe\n      // (usually for ReLU layers due to performance reasons)\n      // To make this library more efficient,\n      // we should allow and implement these self loops\n      this.layers.values()\n        .filter((d: any) => d.input !== undefined && d.input === d.output)\n        .forEach((d: any) => {\n          this.edges\n            .filter((edge: IEdge) => edge.from === d.input)\n            .forEach((edge: IEdge) => {\n              edge.from = d.name;\n              if (!edgeSet.has(getEdgeId(d.input,  d.name))) {\n                this.edges.push({ from: d.input, to: d.name });\n                edgeSet.add(getEdgeId(d.input, d.name));\n              }\n            })\n        });\n    }\n\n    loadWeights(): any {\n      if (!this.weightPath) {\n        return Promise.resolve();\n      }\n      // Load all separate weights for the layers\n      return Promise.all(this.layers.values()\n        .filter((d) => d.layer_type == 'conv' || d.layer_type == 'fc')\n        .map((layer: any) => {\n            return Promise.all([\n              fetch(this.weightPath + layer.name + '_filter.bin')\n                .then((response) => response.arrayBuffer())\n                .then((arrayBuffer) => {\n                  var f = new Float32Array(arrayBuffer);\n                  var n = layer.num_inputs === undefined\n                    ? Math.ceil(layer.sx * layer.sy * layer.in_depth / layer.conv_groups)\n                    : layer.num_inputs;\n                  for(var i=0; i<layer.out_depth; i++) {\n                    layer.filters[i].w.set(f.slice(i*n, i*n+n));\n                  }\n                }),\n              fetch(this.weightPath + layer.name + '_bias.bin')\n                .then((response) => response.arrayBuffer())\n                .then((arrayBuffer) => {\n                  var f = new Float32Array(arrayBuffer);\n                  layer.biases.w.set(f);\n                })\n            ]);\n        }));\n    }\n  }\n}\n","/// <reference path=\"../Net/_module.ts\" />\n/// <reference path=\"../NumJS/_module.ts\" />\n\n//import {Promise} from 'es6-shim';\n\nnamespace ImgJS {\n  \n  // declare Promise\n  declare var Promise: any;\n\n  const nj = NumJS;\n  \n  // TODO\n  // image.size = image.width, image.height\n  // \n  // Implement the Vol functions\n  // image.resize()\n  // image.roll()\n\n  export class Image {\n\n    data: Uint8ClampedArray;\n    canvas: HTMLCanvasElement;\n    image: HTMLImageElement;\n\n    constructor(public src?: string){\n      this.canvas = document.createElement('canvas');\n      this.image = document.createElement('img');\n    }\n\n    set(imgData: ImageData) {\n      this.data = imgData.data;\n      this.image.width = imgData.width;\n      this.image.height = imgData.height;\n      return this;\n    }\n\n    load() {\n      return new Promise((resolve, reject) => {\n        var ctx = this.canvas.getContext('2d');\n        this.image.onload = () => {\n          (<any>ctx).imageSmoothingEnabled = false;\n          this.canvas.width = this.image.width;\n          this.canvas.height = this.image.height;\n          \n          ctx.drawImage(this.image, 0, 0);\n          var imgData = ctx.getImageData(0, 0, this.image.width, this.image.height);\n          this.data = imgData.data;\n          \n          resolve(this.data);\n        };\n        this.image.src = this.src + '?' + new Date().getTime();\n        this.image.setAttribute('crossOrigin', '');\n      });\n    }\n\n    render(canvas?: HTMLCanvasElement) {\n      if (canvas === undefined) {\n        canvas = this.canvas;\n        document.body.appendChild(canvas);\n      }\n      canvas.width = this.image.width;\n      canvas.height = this.image.height;\n      var ctx = canvas.getContext('2d');\n      (<any>ctx).imageSmoothingEnabled = false;\n      var img = ctx.getImageData(0, 0, this.image.width, this.image.height);\n      img.data.set(this.data);\n      ctx.putImageData(img, 0, 0);\n    }\n\n    static fromMean(vol: Net.Vol, depth = 0, scale = 1, normalize = false) {\n      return Image.fromVol(vol, 0, [0,1,2], scale, normalize);\n    }\n\n    static fromFilter(vol: Net.Vol, depth = 0, scale = 1, normalize = true) {\n      return Image.fromVol(vol, 0, depth, scale, normalize);\n    }\n\n    // Caffe uses OpenCV to load JPEGs and leaves them in their default BGR order\n    // hence we need to also convert them back to RGB\n    static fromVol(vol: Net.Vol, mean: any, channel: number | number[] = [2,1,0], scale = 1, normalize = false, aplha = 255){\n      var img = new Image();\n      mean = mean !== undefined ? mean : [0, 0, 0];\n      \n      var w = vol.sx;\n      var h = vol.sy;\n      var n = w*h*4;\n      var mm = nj.maxmin(vol.w);\n\n      var c0 = channel ? channel instanceof Array ? channel[0] : +channel : 0;\n      var c1 = channel ? channel instanceof Array ? channel[1] : +channel : 0;\n      var c2 = channel ? channel instanceof Array ? channel[2] : +channel : 0;\n      \n      var data = new Uint8ClampedArray(n);\n      \n      for (let y=0; y < h; y++){\n        for (let x=0; x < w; x++){\n          let pp = (y*w + x) * 4;\n          let mean_0 = mean ? mean instanceof Net.Vol ? mean.get(x,y,c0) : +mean[c0] : 0;\n          let mean_1 = mean ? mean instanceof Net.Vol ? mean.get(x,y,c1) : +mean[c1] : 0;\n          let mean_2 = mean ? mean instanceof Net.Vol ? mean.get(x,y,c2) : +mean[c2] : 0;\n          let dval_0 = vol.get(x, y, c0);\n          let dval_1 = vol.get(x, y, c1);\n          let dval_2 = vol.get(x, y, c2);\n          if (normalize) {\n            dval_0 = Math.floor((vol.get(x, y, c0) - mm.minv) / mm.dv * 255);\n            dval_1 = Math.floor((vol.get(x, y, c1) - mm.minv) / mm.dv * 255);\n            dval_2 = Math.floor((vol.get(x, y, c2) - mm.minv) / mm.dv * 255);  \n          }\n          data[pp + 0] = dval_0 + mean_0;\n          data[pp + 1] = dval_1 + mean_1;\n          data[pp + 2] = dval_2 + mean_2;\n          data[pp + 3] = aplha;\n        }\n      }\n      img.image.width = w;\n      img.image.height = h;\n      img.data = data;\n      return img;\n    }\n\n    // Caffe uses OpenCV to load JPEGs and leaves them in their default BGR order\n    // hence we need to also convert to BGR order\n    // Also mean should be provided in this format\n    toVol(mean: any, channel = [2,1,0]) {\n      mean = mean !== undefined ? mean : [0, 0, 0];\n      var w = this.image.width;\n      var h = this.image.height;\n      var c0 = channel[0];\n      var c1 = channel[1];\n      var c2 = channel[2];\n      var vol = new Net.Vol(w, h, 3, 0.0);\n      for (var y=0; y < h; y++){\n        for (var x=0; x < w; x++){\n          var pp = (y*w + x) * 4;\n          var mean_0 = mean instanceof Net.Vol ? mean.get(x,y,c0) : +mean[c0];\n          var mean_1 = mean instanceof Net.Vol ? mean.get(x,y,c1) : +mean[c1];\n          var mean_2 = mean instanceof Net.Vol ? mean.get(x,y,c2) : +mean[c2];\n          vol.set(x, y, c0, this.data[pp + 0] - mean_0);\n          vol.set(x, y, c1, this.data[pp + 1] - mean_1);\n          vol.set(x, y, c2, this.data[pp + 2] - mean_2);\n        }\n      }\n      return vol;\n    }\n  }\n}\n","/// <reference path=\"../ImgJS/_module.ts\" />\n/// <reference path=\"../NumJS/_module.ts\" />\n\n//import * as d3 from 'd3';\n\nnamespace Utils {\n  \n  // declare variables\n  declare var d3: any;\n  \n  const nj = NumJS;\n  const im = ImgJS;\n\n  export class ActivationDrawer extends Net.Model {\n\n    constructor() {\n      super();\n    }\n\n    render(element, renderInput: boolean = true, maxElementsPerLayer?: number, width?, height?) {\n      // Clean\n      var $elem = d3.select(element);\n      $elem.selectAll('*').remove();\n\n      this.layerIterator(function(layer, j){\n\n        if (!renderInput && j == 0) {\n          return;\n        }\n\n        $elem.append('h5').text(layer.name);\n        \n        var $div = $elem.append('div')\n          .attr('class', 'net-layer');\n        \n        var $vis = $div.append('div')\n          .attr('class', 'net-vis');\n\n        var $weights = $vis.append('div')\n          .attr('class', 'net-weights');\n\n        var $activations = $vis.append('div')\n          .attr('class', 'net-activations');\n\n        for (let i=0, len=layer.out_act.depth; i<len; ++i){\n          if (maxElementsPerLayer && i >= maxElementsPerLayer){\n            return;\n          }\n          let $canv: any = $activations.append('canvas');\n          let A = layer.out_act;\n\n          // if (width && height){\n          //   A = A.zoom(width / A.sx, height / A.sy);\n          // }\n\n          im.Image.fromFilter(A, i, 1).render($canv[0][0]);\n        }\n      });\n    }\n\n    static fromNet(model: Net.Model){\n      var g = new ActivationDrawer;\n      g.layers = model.layers;\n      g.edges = model.edges;\n      return g;\n    }\n  }\n}","/// <reference path=\"../Net/_module.ts\" />\n\n// import * as d3 from 'd3';\n// import * as dagreD3 from 'dagre-d3';\n\nnamespace Utils {\n  \n  // declare variables\n  declare var d3: any;\n  declare var dagreD3: any;\n\n  export class GraphDrawer extends Net.Model {\n\n    graph: any;\n    $elem: any;\n    $svg: any;\n    $g: any;\n\n    width: number;\n    height: number;\n\n    static readonly MIN_LAYER_HEIGHT: number = 16;\n    static readonly MAX_LAYER_HEIGHT: number = 48;\n\n    static readonly MIN_LAYER_WIDTH: number = 128;\n    static readonly MAX_LAYER_WIDTH: number = 512;\n    \n    static readonly NODE_RADIUS: number = 4;\n    static readonly LAYER_GROUP_SEP: string = '/';\n    static readonly LAYER_NAME_SEP: string = '_';\n\n    constructor(private compact: boolean = false) {\n      super();\n    }\n\n    render(element, width?, height?) {\n      // Create the renderer\n      var render = new dagreD3.render();\n      this.graph = this.compact ? this.createCompactGraph() : this.createGraph();\n\n      // Clean\n      this.$elem = d3.select(element);\n      this.$elem.selectAll('*').remove();\n\n      // Run the renderer. This is what draws the final graph.\n      this.$svg = this.$elem.append('svg'); \n\n      this.$g = this.$svg.append(\"g\");\n      render(this.$g, this.graph);\n\n      this.width = width || this.graph.graph().width;\n      this.height = height || this.graph.graph().height;\n\n      // Center the graph\n      var xOffset = (this.width - this.graph.graph().width) / 2;\n      if (xOffset) {\n        this.$g.attr(\"transform\", \"translate(\" + xOffset + \")\");\n      }\n\n      this.$svg.attr('width', this.width);\n      this.$svg.attr('height', this.height);\n\n      return this;\n    }\n\n    fit() {\n      // this.$g.attr(\"transform\", \"translate(\" + 0 + \")\");\n      this.$svg.attr(\"viewBox\", \"0 0 \" + this.graph.graph().width + \" \" + this.graph.graph().height)\n      // this.$svg.attr(\"preserveAspectRatio\", \"xMinYMax meet\");\n      return this;\n    }\n\n    rotate() {\n      var xOffset = (this.width - this.graph.graph().width) / 2;\n      this.$g.attr(\"transform\", \"rotate(270) translate(\" + xOffset + \")\");\n      this.$svg.attr(\"viewBox\", \"0 0 \" + this.graph.graph().height + \" \" + this.graph.graph().width);\n      return this;\n    }\n\n    getHeightScaleTemplate(exp: number = 0.25) {\n      return d3.scale.pow().exponent(exp).range([GraphDrawer.MIN_LAYER_HEIGHT, GraphDrawer.MAX_LAYER_HEIGHT]).clamp(true);\n    }\n\n    getWidthScaleTemplate(exp: number = 0.75) {\n      return d3.scale.pow().exponent(exp).range([GraphDrawer.MIN_LAYER_WIDTH, GraphDrawer.MAX_LAYER_WIDTH]).clamp(true);\n    }\n\n    getWidthScale() {\n      var extWidth = d3.extent(this.layers.values(), d => d.getOutputShape()[1]);\n      var extHeight = d3.extent(this.layers.values(), d => d.getOutputShape()[2]);\n\n      var widthScale = this.getWidthScaleTemplate().domain([\n        Math.min(extWidth[0], extHeight[0]),\n        Math.max(extWidth[1], extHeight[1])\n      ]);\n\n      return function(layer) {\n         var layerSize = Math.max(layer.getOutputShape()[1], layer.getOutputShape()[2]);\n         return widthScale(layerSize);\n      };\n    }\n\n    getHeightScale() {\n      var extDepth = d3.extent(this.layers.values(), d => d.getOutputShape()[0]);\n      \n      var heightScale = this.getHeightScaleTemplate().domain([\n        extDepth[0], extDepth[1]\n      ]);\n\n      return function(layer) {\n         var layerDepth = layer.getOutputShape()[0];\n         return heightScale(layerDepth);\n      };\n    }\n\n    createCompactGraph() {\n\n      var g = new dagreD3.graphlib.Graph()\n        .setGraph({})\n        .setDefaultEdgeLabel(() => '');\n\n      var getWidth = this.getWidthScale();\n      var getHeight = this.getHeightScale();\n\n      var take = (desc, k) => desc.splice(k, 1);\n      var skip = (desc, k) => desc.filter((d, i) => i !== k);\n      var after = (d, f) => d != \"\" ? d + f : d;\n      var before = (d, f) => d != \"\" ? f + d : d;\n      var emph = (d) => \"<strong>\" + d + \"</strong>\";\n\n      var paramsFormat = d3.format('s');\n\n      var getNumParams = function(layerGroup) {\n        var numParams = d3.sum(layerGroup.values, d => d3.sum(d.getNumParameters()));\n        return numParams ? after(paramsFormat(numParams), \" parameters\") : \"\";\n      };\n\n      var getCompactLabel = function(layerGroup) {\n        if (layerGroup.values.length === 1) {\n          return layerGroup.values.map(d => emph(d.getDescription()[0]))[0];\n        }\n        else if (layerGroup.values.length <= 5) {\n          return layerGroup.values.map(d => emph(d.getDescription()[0])).join(\" + \");\n        }\n        return emph(layerGroup.key.split(GraphDrawer.LAYER_NAME_SEP)[0].toUpperCase());\n      }\n\n      var getCompactClass = function(layerGroup) {\n        if (layerGroup.values.length === 1) {\n          return layerGroup.values[0].layer_type;\n        }\n        else if (layerGroup.values.length <= 5) {\n          return layerGroup.values[0].layer_type;\n        }\n        return layerGroup.key.split(GraphDrawer.LAYER_NAME_SEP)[0].replace(/\\d/g, '');\n      }\n\n      var layers = d3.nest()\n        .key(d => d.name.split(GraphDrawer.LAYER_GROUP_SEP)[0])\n        .entries(this.layers.values());\n\n      layers.forEach(function(layer, i){\n        var lastLayer = layer.values[layer.values.length - 1];\n        \n        g.setNode(layer.key,  {\n          labelType: \"html\",\n          label: getCompactLabel(layer) + before(getNumParams(layer), \"<br>\"),\n          class: \"layer layer-\" + getCompactClass(layer),\n          width: getWidth(lastLayer),\n          height: getHeight(lastLayer)\n        });\n\n        if (i > 0) {\n          var prev = layers[i - 1];\n          var prevLayer = prev.values[prev.values.length - 1];\n\n          g.setEdge(prev.key, layer.key, {\n            label: prevLayer.getOutputShape().join('x'),\n            class: \"edge\"\n          });\n        }\n      });\n\n      return GraphDrawer.addRoundCorners(g);\n    }\n\n    createGraph() {\n       \n      var emph = (arr, j) => arr.map((d, i) => i === j ? \"<strong>\" + d + \"</strong>\" : d);\n\n      var getWidth = this.getWidthScale();\n\n      // Create the input graph\n      var g = new dagreD3.graphlib.Graph()\n        .setGraph({})\n        .setDefaultEdgeLabel(() => '');\n\n      this.layerIterator((layer, i, pred) => {\n        // var numParamsPerLayer = nj.sum(layer.getNumParameters());\n        g.setNode(layer.name,  {\n          labelType: \"html\",\n          label: emph(layer.getDescription(), 0).join('<br>'),\n          class: \"layer layer-\" + layer.layer_type,\n          width: getWidth(layer)\n        });\n      });\n\n      this.edges\n        .filter((edge) => edge.from !== undefined && edge.to !== undefined)\n        .forEach((edge) => {\n          g.setEdge(edge.from, edge.to, {\n            label: this.layers.get(edge.from).getOutputShape().join('x'),\n            class: \"edge\"\n          });\n        });\n\n      return GraphDrawer.addRoundCorners(g);\n    }\n\n    static addRoundCorners(graph) {\n      graph.nodes().forEach(function(v) {\n        var node = graph.node(v);\n\n        // Round the corners of the nodes\n        node.rx = node.ry = GraphDrawer.NODE_RADIUS;\n      });\n      return graph;\n    }\n\n    static fromNet(model: Net.Model, compact: boolean = false){\n      var g = new GraphDrawer(compact);\n      g.layers = model.layers;\n      g.edges = model.edges;\n      return g;\n    }\n  }\n}\n"]}